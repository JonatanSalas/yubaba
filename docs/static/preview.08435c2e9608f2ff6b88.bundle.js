(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{107:function(n,t,e){n.exports=e.p+"b4734797388651ca2f831faa1bb412e6.png"},13:function(n,t,e){"use strict";var r,o,i,a,c,l,s,u,p,f,m,d,h,g,b,y,x,v,w=e(9),E=e.n(w),k=e(8),O=e.n(k),_=e(0),T=(r=function(n,t){return(r=O.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?E()(t):(e.prototype=t.prototype,new e)}),j=function(){var n=0;return function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.componentDidMount=function(){window.scrollTo(0,n)},e.prototype.componentWillUnmount=function(){document.body&&(n=document.documentElement.scrollTop||document.body.scrollTop||window.pageYOffset)},e.prototype.render=function(){return null},e}(_.Component)},A=function(){var n=function(t,e){return(n=O.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?E()(e):(r.prototype=e.prototype,new r)}}(),z=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return A(t,n),t.prototype.componentDidMount=function(){window.scrollTo(0,0)},t.prototype.render=function(){return null},t}(_.Component),C=e(50),P=e.n(C),F=e(2),R=e(105),D=function(n,t){return P.a?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},M=function(){var n=function(t,e){return(n=O.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?E()(e):(r.prototype=e.prototype,new r)}}(),I=F.b.div(o||(o=D(["\n  height: 100vh;\n  max-width: 411px;\n  max-height: 731px;\n  border-radius: 3px;\n  box-shadow: 0 1px 50px rgba(32, 33, 36, 0.1);\n  border: 1px solid rgba(32, 33, 36, 0.1);\n  box-sizing: border-box;\n  font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n  user-select: none;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n\n  * {\n    box-sizing: border-box;\n    user-select: none;\n  }\n\n  button::-moz-focus-inner {\n    border: 0;\n  }\n\n  ul {\n    padding: 0;\n    margin: 0;\n  }\n"],["\n  height: 100vh;\n  max-width: 411px;\n  max-height: 731px;\n  border-radius: 3px;\n  box-shadow: 0 1px 50px rgba(32, 33, 36, 0.1);\n  border: 1px solid rgba(32, 33, 36, 0.1);\n  box-sizing: border-box;\n  font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n  user-select: none;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n\n  * {\n    box-sizing: border-box;\n    user-select: none;\n  }\n\n  button::-moz-focus-inner {\n    border: 0;\n  }\n\n  ul {\n    padding: 0;\n    margin: 0;\n  }\n"]))),N=F.b.div(i||(i=D(["\n  height: 100%;\n  overflow: auto;\n"],["\n  height: 100%;\n  overflow: auto;\n"]))),S=F.b.div(a||(a=D(["\n  position: absolute;\n  left: 0;\n  right: 0;\n  height: 26px;\n  background-color: rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n"],["\n  position: absolute;\n  left: 0;\n  right: 0;\n  height: 26px;\n  background-color: rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n"]))),B=F.b.div(c||(c=D(["\n  z-index: 999999999;\n"],["\n  z-index: 999999999;\n"]))),W=F.b.div(l||(l=D(["\n  height: 12px;\n  width: 12px;\n  margin-left: auto;\n  background-color: ",";\n  margin-right: 9px;\n  opacity: 0.35;\n"],["\n  height: 12px;\n  width: 12px;\n  margin-left: auto;\n  background-color: ",";\n  margin-right: 9px;\n  opacity: 0.35;\n"])),function(n){return n.invertColor?"#fff":"#000"}),H=Object(F.b)(W)(s||(s=D(["\n  margin-left: 0;\n  border-radius: 50%;\n"],["\n  margin-left: 0;\n  border-radius: 50%;\n"]))),L=Object(F.b)(W)(u||(u=D(["\n  margin-left: -3px;\n  width: 0;\n  height: 0;\n  background-color: transparent;\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-top: 12px solid ",";\n"],["\n  margin-left: -3px;\n  width: 0;\n  height: 0;\n  background-color: transparent;\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-top: 12px solid ",";\n"])),function(n){return n.invertColor?"#fff":"#000"}),q=F.b.div(p||(p=D(["\n  position: relative;\n  /* Hack to align contents to container taking off header height */\n  height: calc(100% - 82px);\n\n  @media (min-width: 584px) {\n    /* Hack to align contents to container taking off header height */\n    height: calc(100% - 90px);\n  }\n"],["\n  position: relative;\n  /* Hack to align contents to container taking off header height */\n  height: calc(100% - 82px);\n\n  @media (min-width: 584px) {\n    /* Hack to align contents to container taking off header height */\n    height: calc(100% - 90px);\n  }\n"]))),U=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.theme=Object(R.createMuiTheme)({palette:{primary:{light:"#484848",main:"#212121",dark:"#000000",contrastText:"#fff"}}}),t}return M(t,n),t.prototype.render=function(){var n=this.props,t=n.invertColor,e=n.children,r=n.appBar;return _.createElement(R.MuiThemeProvider,{theme:this.theme},_.createElement(I,null,_.createElement(B,null,_.createElement(S,null,_.createElement(W,{invertColor:!!t}),_.createElement(H,{invertColor:!!t}),_.createElement(L,{invertColor:!!t})),r),_.createElement(q,null,_.createElement(N,null,e))))},t}(_.Component),G=function(n,t){return P.a?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},J=F.b.button(f||(f=G(["\n  position: fixed;\n  bottom: 10px;\n  left: 10px;\n  font-size: 20px;\n  border-radius: 4px;\n  background-color: #ccc;\n  border: 2px solid grey;\n  padding: 8px;\n  z-index: 999;\n"],["\n  position: fixed;\n  bottom: 10px;\n  left: 10px;\n  font-size: 20px;\n  border-radius: 4px;\n  background-color: #ccc;\n  border: 2px solid grey;\n  padding: 8px;\n  z-index: 999;\n"]))),Y=function(){var n=function(t,e){return(n=O.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?E()(e):(r.prototype=e.prototype,new r)}}(),K=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={shown:!1},t.toggle=function(n){t.setState(function(t){return{shown:!t.shown&&(n||!0)}})},t.set=function(n){t.setState({shown:n})},t}return Y(t,n),t.prototype.render=function(){return this.props.children({toggle:this.toggle,set:this.set,shown:this.state.shown})},t}(_.Component),Q=e(155),X=e.n(Q),V=e(30),Z=e.n(V),$=function(n,t){return P.a?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},nn=(j(),F.b.button(d||(d=$(["\n  font-size: ","em;\n  margin: ","px;\n  height: ","em;\n  width: ","em;\n  border-radius: ",";\n  background: #fea3aa;\n  position: relative;\n  cursor: pointer;\n\n  &:before {\n    content: 'click me';\n    text-align: center;\n    left: 0;\n    right: 0;\n    position: absolute;\n    color: white;\n    font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n    top: 75%;\n    font-size: 1em;\n  }\n\n  &:after {\n    content: 'ðŸ˜Š';\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 5em;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    pointer-events: none;\n  }\n\n  ",";\n"],["\n  font-size: ","em;\n  margin: ","px;\n  height: ","em;\n  width: ","em;\n  border-radius: ",";\n  background: #fea3aa;\n  position: relative;\n  cursor: pointer;\n\n  &:before {\n    content: 'click me';\n    text-align: center;\n    left: 0;\n    right: 0;\n    position: absolute;\n    color: white;\n    font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n    top: 75%;\n    font-size: 1em;\n  }\n\n  &:after {\n    content: 'ðŸ˜Š';\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 5em;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    pointer-events: none;\n  }\n\n  ",";\n"])),function(n){return n.size||1},function(n){return n.margin||0},function(n){return 10*(n.height||1)},function(n){return 10*(n.width||1)},function(n){return n.borderRadius},function(n){return n.alternate?Object(F.a)(m||(m=$(["\n          background: #b2cefe;\n\n          &:after {\n            content: 'ðŸ˜³';\n          }\n        "],["\n          background: #b2cefe;\n\n          &:after {\n            content: 'ðŸ˜³';\n          }\n        "]))):""})),tn=(F.b.div(h||(h=$(["\n  display: flex;\n  align-items: center;\n  background: #baed91;\n  height: 500px;\n  width: 500px;\n"],["\n  display: flex;\n  align-items: center;\n  background: #baed91;\n  height: 500px;\n  width: 500px;\n"]))),Object(F.b)(nn)(g||(g=$(["\n  float: right;\n"],["\n  float: right;\n"])))),en=Object(F.b)(nn)(b||(b=$(["\n  height: 100%;\n  width: 100%;\n  position: absolute;\n"],["\n  height: 100%;\n  width: 100%;\n  position: absolute;\n"]))),rn=F.b.div(y||(y=$(["\n  height: 90vh;\n"],["\n  height: 90vh;\n"]))),on=F.b.div(x||(x=$(["\n  padding-top: 50vh;\n  height: 150vh;\n"],["\n  padding-top: 50vh;\n  height: 150vh;\n"]))),an=F.b.div(v||(v=$(["\n  font-size: 1em;\n  height: 10em;\n  width: 10em;\n  position: relative;\n  float: right;\n"],["\n  font-size: 1em;\n  height: 10em;\n  width: 10em;\n  position: relative;\n  float: right;\n"]))),cn=function(){return(cn=Z.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},ln=function(n,t){var e={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&t.indexOf(r)<0&&(e[r]=n[r]);if(null!=n&&"function"==typeof X.a){var o=0;for(r=X()(n);o<r.length;o++)t.indexOf(r[o])<0&&(e[r[o]]=n[r[o]])}return e},sn=j(),un=function(n){return function(t,e){return{Default:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},WithMargin:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({margin:100,innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},ToLarge:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({size:2,innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},ToLargeWithMargin:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({size:2,innerRef:e,margin:50,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({margin:20,innerRef:t,onClick:function(){return i()}},e))})))})},ToRectangle:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({width:2,innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},ToCircle:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd,borderRadius:"50%"},r))})):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},FromOffscreen:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement("div",null,_.createElement(rn,null),_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))}))))})},ToOffscreen:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement("div",null,_.createElement(rn,null),_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))}))):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},ToIndiscriminateSize:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(an,null,_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(en,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))}))):_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})))})},FromLongPage:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,o?_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-2"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})):_.createElement(on,null,_.createElement(sn,null),_.createElement(t,{name:n.namePrefix+"-anim",key:n.namePrefix+"-1"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))}))))})},FromAlwaysMounted:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,_.createElement(t,{name:n.namePrefix+"-default",in:!o},_.createElement(e,null,function(n){var t=n.ref,e=n.style,r=ln(n,["ref","style"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()},style:cn({},e,{opacity:o?0:e.opacity})},r))})),o&&_.createElement(t,{name:n.namePrefix+"-default"},_.createElement(e,null,function(t){var e=t.ref,r=ln(t,["ref"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd},r))})))})},ToAlwaysMounted:function(){return _.createElement(K,null,function(r){var o=r.shown,i=r.toggle;return _.createElement("div",null,!o&&_.createElement(t,{name:n.namePrefix+"-default"},_.createElement(e,null,function(n){var t=n.ref,e=ln(n,["ref"]);return _.createElement(nn,cn({innerRef:t,onClick:function(){return i()}},e))})),_.createElement(t,{name:n.namePrefix+"-default",in:!!o},_.createElement(e,null,function(t){var e=t.ref,r=t.style,a=ln(t,["ref","style"]);return _.createElement(tn,cn({innerRef:e,onClick:function(){return i()},alternate:n.useDistinctEnd,style:cn({},r,{opacity:o?r.opacity:0})},a))})))})}}}};e.d(t,"f",function(){return j}),e.d(t,"a",function(){return z}),e.d(t,"b",function(){return U}),e.d(t,"c",function(){return J}),e.d(t,"d",function(){return K}),e.d(t,"e",function(){return un})},149:function(n,t,e){"use strict";var r,o=e(0),i=e(7),a=e(40),c=e(24),l=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),s=function(){return(s=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},u=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.started=!1,t.state={state:"from"},t.start=function(){t.started||(t.started=!0,window.setTimeout(function(){t.setState({state:"to"}),window.setTimeout(t.props.onFinish,t.props.duration)},14))},t}return l(t,n),t.prototype.componentDidMount=function(){this.props.start&&this.start()},t.prototype.componentDidUpdate=function(){this.props.start&&this.start()},t.prototype.render=function(){var n=this.props,t=n.from,e=n.to;return o.createElement("span",{style:"from"===this.state.state?t:s({},t,e)},this.props.children)},t.defaultProps={start:!0},t}(o.Component),p=e(84),f=e(88),m=function(){var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),d=function(){return(d=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},h=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=Object(c.d)(n.fromTarget),i=n.toTarget.location.left-r.location.left,l=n.toTarget.location.top-r.location.top,s=r.location.left-n.toTarget.location.left,f=r.location.top-n.toTarget.location.top,m=t.props.duration,h="translate3d(0, 0, 0) scale3d(1, 1, 1)",g=t.props.timingFunction,b={transition:"transform "+m+"ms "+g+", opacity "+m/2+"ms "+g,position:"absolute",transformOrigin:"0 0"};return t.renderAnimation=function(e){return o.createElement(o.Fragment,null,o.createElement(u,{key:"1",start:e.start,duration:t.props.duration,from:d({},r.location,b,{transform:h,opacity:1,zIndex:t.props.zIndex||2e4}),to:{transform:"translate3d("+i+"px, "+l+"px, 0) scale3d("+a.b(n.toTarget.size.width,r.size.width)+", "+a.b(n.toTarget.size.height,r.size.height)+", 1)",opacity:0},onFinish:e.onFinish},n.fromTarget.render({ref:p.a,style:{margin:0,height:r.size.height+"px",width:r.size.width+"px"}})),o.createElement(u,{key:"2",start:e.start,duration:t.props.duration,from:d({},n.toTarget.location,b,{transition:"transform "+m+"ms "+g+", opacity 10ms "+g,zIndex:t.props.zIndex?t.props.zIndex-1:19999,opacity:0,transform:"translate3d("+s+"px, "+f+"px, 0) scale3d("+a.b(r.size.width,n.toTarget.size.width)+", "+a.b(r.size.height,n.toTarget.size.height)+", 1)"}),to:{opacity:1,transform:h},onFinish:e.onFinish},n.toTarget.render({ref:p.a,style:{margin:0,height:n.toTarget.size.height+"px",width:n.toTarget.size.width+"px"}})))},requestAnimationFrame(e),t.renderAnimation({onFinish:e,start:!1})},t.animate=function(n,e){return t.renderAnimation({onFinish:e,start:!0})},t}return m(t,n),t.prototype.render=function(){var n={action:i.a.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate}};return o.createElement(i.c,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:Object(f.a)()},t}(o.Component);t.a=h},15:function(n,t,e){"use strict";e.d(t,"e",function(){return j}),e.d(t,"m",function(){return A}),e.d(t,"u",function(){return z}),e.d(t,"v",function(){return C}),e.d(t,"r",function(){return P}),e.d(t,"q",function(){return F}),e.d(t,"t",function(){return R}),e.d(t,"l",function(){return D}),e.d(t,"j",function(){return M}),e.d(t,"h",function(){return I}),e.d(t,"f",function(){return N}),e.d(t,"g",function(){return S}),e.d(t,"k",function(){return B}),e.d(t,"a",function(){return W}),e.d(t,"i",function(){return H}),e.d(t,"p",function(){return L}),e.d(t,"o",function(){return q}),e.d(t,"n",function(){return U}),e.d(t,"c",function(){return G}),e.d(t,"s",function(){return J}),e.d(t,"b",function(){return Y}),e.d(t,"d",function(){return K});var r,o,i,a,c,l,s,u,p,f,m,d,h,g,b,y,x,v,w,E,k,O,_=e(2),T=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},j=_.b.header(r||(r=T(["\n  margin-top: 26px;\n  padding: 5px;\n  color: rgba(0, 0, 0, 0.87);\n  display: flex;\n"],["\n  margin-top: 26px;\n  padding: 5px;\n  color: rgba(0, 0, 0, 0.87);\n  display: flex;\n"]))),A=_.b.div(o||(o=T(["\n  background: url(",") no-repeat;\n  background-position: 0 -374px;\n  background-size: 167px;\n  height: 36px;\n  width: 92px;\n  margin-left: 92px;\n  margin-top: 10px;\n"],["\n  background: url(",") no-repeat;\n  background-position: 0 -374px;\n  background-size: 167px;\n  height: 36px;\n  width: 92px;\n  margin-left: 92px;\n  margin-top: 10px;\n"])),e(804)),z=_.b.div(i||(i=T(["\n  height: 80px;\n  box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);\n  border-radius: 8px;\n  margin-left: 8px;\n  margin-right: 8px;\n"],["\n  height: 80px;\n  box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);\n  border-radius: 8px;\n  margin-left: 8px;\n  margin-right: 8px;\n"]))),C=_.b.div(a||(a=T(["\n  height: 40px;\n  box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);\n  border-radius: 8px;\n  margin-top: 10px;\n  margin-left: 8px;\n  margin-right: 8px;\n"],["\n  height: 40px;\n  box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);\n  border-radius: 8px;\n  margin-top: 10px;\n  margin-left: 8px;\n  margin-right: 8px;\n"]))),P=_.b.div(c||(c=T(["\n  padding-top: 10px;\n  white-space: nowrap;\n  overflow: auto;\n  width: 100%;\n  padding-left: 8px;\n  padding-right: 8px;\n"],["\n  padding-top: 10px;\n  white-space: nowrap;\n  overflow: auto;\n  width: 100%;\n  padding-left: 8px;\n  padding-right: 8px;\n"]))),F=_.b.div(l||(l=T(["\n  background-color: #fff;\n  border-radius: 40px;\n  box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);\n  box-sizing: border-box;\n  display: inline-block;\n  margin-right: 8px;\n  overflow: hidden;\n  padding: 0 16px;\n\n  > span {\n    color: rgba(0, 0, 0, 0.8);\n    display: inline-block;\n    font-size: 14px;\n    font-weight: 300;\n    line-height: 40px;\n    text-decoration: none;\n    white-space: nowrap;\n  }\n"],["\n  background-color: #fff;\n  border-radius: 40px;\n  box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);\n  box-sizing: border-box;\n  display: inline-block;\n  margin-right: 8px;\n  overflow: hidden;\n  padding: 0 16px;\n\n  > span {\n    color: rgba(0, 0, 0, 0.8);\n    display: inline-block;\n    font-size: 14px;\n    font-weight: 300;\n    line-height: 40px;\n    text-decoration: none;\n    white-space: nowrap;\n  }\n"]))),R=_.b.div(s||(s=T(["\n  margin-bottom: 16px;\n"],["\n  margin-bottom: 16px;\n"]))),D=_.b.img(u||(u=T(["\n  width: 100%;\n  cursor: pointer;\n  background-color: rgba(0, 0, 0, 0.03);\n"],["\n  width: 100%;\n  cursor: pointer;\n  background-color: rgba(0, 0, 0, 0.03);\n"]))),M=_.b.div(p||(p=T(["\n  color: rgba(32, 33, 36, 0.8);\n  font-size: 11px;\n  letter-spacing: 0.2px;\n  line-height: 14px;\n  max-height: 14px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-top: 4px;\n"],["\n  color: rgba(32, 33, 36, 0.8);\n  font-size: 11px;\n  letter-spacing: 0.2px;\n  line-height: 14px;\n  max-height: 14px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-top: 4px;\n"]))),I=_.b.div(f||(f=T(["\n  color: rgba(117, 117, 117, 0.85);\n  font-size: 10px;\n  height: 14px;\n  letter-spacing: 0.2px;\n  line-height: 14px;\n  overflow: hidden;\n  position: relative;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n"],["\n  color: rgba(117, 117, 117, 0.85);\n  font-size: 10px;\n  height: 14px;\n  letter-spacing: 0.2px;\n  line-height: 14px;\n  overflow: hidden;\n  position: relative;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n"]))),N=_.b.div(m||(m=T(["\n  background-color: rgba(0, 0, 0, 0.03);\n  position: absolute;\n  width: 100%;\n  top: 0;\n  bottom: 0;\n  height: calc(100% - 4px);\n  pointer-events: none;\n"],["\n  background-color: rgba(0, 0, 0, 0.03);\n  position: absolute;\n  width: 100%;\n  top: 0;\n  bottom: 0;\n  height: calc(100% - 4px);\n  pointer-events: none;\n"]))),S=_.b.div(d||(d=T(["\n  position: relative;\n"],["\n  position: relative;\n"]))),B=_.b.div(h||(h=T(["\n  padding: 8px;\n  display: flex;\n  justify-content: space-between;\n"],["\n  padding: 8px;\n  display: flex;\n  justify-content: space-between;\n"]))),W=_.b.div(g||(g=T(["\n  width: calc(50% - 4px);\n"],["\n  width: calc(50% - 4px);\n"]))),H=_.b.div(b||(b=T(["\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow: auto;\n"],["\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow: auto;\n"]))),L=_.b.div(y||(y=T(["\n  color: #000000;\n  display: block;\n  font-size: 20px;\n  line-height: 30px;\n  margin-right: 32px;\n  max-height: 60px;\n  overflow: hidden;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  white-space: normal;\n  word-wrap: break-word;\n"],["\n  color: #000000;\n  display: block;\n  font-size: 20px;\n  line-height: 30px;\n  margin-right: 32px;\n  max-height: 60px;\n  overflow: hidden;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  white-space: normal;\n  word-wrap: break-word;\n"]))),q=_.b.img(x||(x=T(["\n  background-color: #fff;\n  background-image: -webkit-linear-gradient(\n      45deg,\n      #efefef 25%,\n      transparent 25%,\n      transparent 75%,\n      #efefef 75%,\n      #efefef\n    ),\n    -webkit-linear-gradient(45deg, #efefef 25%, transparent 25%, transparent 75%, #efefef 75%, #efefef);\n  background-position: 0 0, 10px 10px;\n  background-size: 21px 21px;\n  width: 100%;\n"],["\n  background-color: #fff;\n  background-image: -webkit-linear-gradient(\n      45deg,\n      #efefef 25%,\n      transparent 25%,\n      transparent 75%,\n      #efefef 75%,\n      #efefef\n    ),\n    -webkit-linear-gradient(45deg, #efefef 25%, transparent 25%, transparent 75%, #efefef 75%, #efefef);\n  background-position: 0 0, 10px 10px;\n  background-size: 21px 21px;\n  width: 100%;\n"]))),U=_.b.div(v||(v=T(["\n  padding: 16px;\n  margin-bottom: 16px;\n"],["\n  padding: 16px;\n  margin-bottom: 16px;\n"]))),G=_.b.div(w||(w=T(["\n  color: #70757a;\n  font-size: 12px;\n  margin-top: 16px;\n"],["\n  color: #70757a;\n  font-size: 12px;\n  margin-top: 16px;\n"]))),J=_.b.div(E||(E=T(["\n  color: #202124;\n  font-size: 12px;\n  font-weight: bold;\n  letter-spacing: 0.75px;\n  line-height: 16px;\n  text-decoration: none;\n  text-transform: uppercase;\n  margin: 8px;\n"],["\n  color: #202124;\n  font-size: 12px;\n  font-weight: bold;\n  letter-spacing: 0.75px;\n  line-height: 16px;\n  text-decoration: none;\n  text-transform: uppercase;\n  margin: 8px;\n"]))),Y=_.b.div(k||(k=T(["\n  transition: opacity ease-out 200ms;\n  background: #fff;\n  margin-top: -4px;\n"],["\n  transition: opacity ease-out 200ms;\n  background: #fff;\n  margin-top: -4px;\n"]))),K=_.b.div(O||(O=T(["\n  transition: opacity 500ms;\n  opacity: ",";\n"],["\n  transition: opacity 500ms;\n  opacity: ",";\n"])),function(n){return n.in?1:0})},150:function(n,t,e){"use strict";var r,o=e(0),i=e(7),a=e(84),c=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),l=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return c(t,n),t.prototype.render=function(){var n=this;return o.createElement(i.b.Consumer,null,function(t){return n.props.children({ref:t?t.targetRef:a.a})})},t}(o.Component);t.a=l},156:function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=[{iconUrl:"",title:"Brunch this weekend?",recipients:"Ali Connors",body:"I'll be in your neighbourhood soon and I think it'd be great to catch up!"},{iconUrl:"",title:"Oui Oui",recipients:"Sandra Adams",body:"Do you have paris recorded?"},{iconUrl:"",title:"Summer BBQ",recipients:"to Jonas, Scott, Jennifer",body:"Hi Friends,\n\nI was at the grocery store on Sunday night... when I ran into Genie Williams! I almost didn't recognise her after 20 years!"},{iconUrl:"",title:"Birthday Gift",recipients:"Trevor Hansen",body:"Have any ideas about that thing?"},{iconUrl:"",title:"Brunch this weekend?",recipients:"Ali Connors",body:"I'll be in your neighbourhood soon and I think it'd be great to catch up!"},{iconUrl:"",title:"Oui Oui",recipients:"Sandra Adams",body:"Do you have paris recorded?"},{iconUrl:"",title:"Summer BBQ",recipients:"to Jonas, Scott, Jennifer",body:"Hi Friends,\n\nI was at the grocery store on Sunday night... when I ran into Genie Williams! I almost didn't recognise her after 20 years!"},{iconUrl:"",title:"Birthday Gift",recipients:"Trevor Hansen",body:"Have any ideas about that thing?"},{iconUrl:"",title:"Brunch this weekend?",recipients:"Ali Connors",body:"I'll be in your neighbourhood soon and I think it'd be great to catch up!"},{iconUrl:"",title:"Oui Oui",recipients:"Sandra Adams",body:"Do you have paris recorded?"},{iconUrl:"",title:"Summer BBQ",recipients:"to Jonas, Scott, Jennifer",body:"Hi Friends,\n\nI was at the grocery store on Sunday night... when I ran into Genie Williams! I almost didn't recognise her after 20 years!"},{iconUrl:"",title:"Birthday Gift",recipients:"Trevor Hansen",body:"Have any ideas about that thing?"}]},214:function(n,t,e){"use strict";var r=[{name:"In a Perfect World",artist:"Kodaline",recentlyAdded:!0,heroBg:"",color:"#223350",albumArt:e(811),songs:[{name:"One Day",time:"4:15"},{name:"All I Want",time:"5:05"},{name:"Love Like This",time:"3:36"},{name:"High Hopes",time:"3:50"},{name:"Brand New Day",time:"3:25"},{name:"After The Fall",time:"3:35"},{name:"Big Bad World",time:"4:21"},{name:"All Comes Down",time:"4:55"},{name:"Talk",time:"4:28"},{name:"Pray",time:"3:33"},{name:"Way Back When",time:"3:26"}],emphasis:!0},{name:"Supermodel",artist:"Foster the People",heroBg:"",color:"#265968",albumArt:e(812),songs:[{name:"Are You What You Want to Be?",time:"4:30"},{name:"Ask Yourself",time:"4:23"},{name:"Coming of Age",time:"4:40"},{name:"Nevermind",time:"5:17"},{name:"Pseudologia Fantastica",time:"5:31"},{name:"The Angelic Welcome of Mr. Jones",time:"0:33"},{name:"Best Friend",time:"4:28"},{name:"A Beginner's Guide to Destroying the Moon",time:"5:09"},{name:"The Truth",time:"4:22"},{name:"Fire Escape",time:"4:29"}]},{name:"Halcyon Days",artist:"Ellie Goulding",heroBg:"",color:"#78014f",albumArt:e(813),songs:[{name:"Don't Say a Word",time:"4:07"},{name:"My Blood",time:"3:54"},{name:"Anything Could Happen",time:"4:47"},{name:"Only You",time:"3:51"},{name:"Halcyon",time:"3:25"},{name:"Figure 8",time:"4:08"},{name:"Joy",time:"3:14"},{name:"Hanging On",time:"3:22"},{name:"Explosions",time:"4:03"},{name:"I Know You Care",time:"3:26"},{name:"Atlantis",time:"3:53"},{name:"Dead in the Water",time:"4:44"},{name:"I Need Your Love (Calvin Harris featuring Ellie Goulding) (bonus track)",time:"3:58"},{name:"Burn",time:"3:51"},{name:"Goodness Gracious",time:"3:46"},{name:"You My Everything",time:"3:29"},{name:"Hearts Without Chains",time:"3:45"},{name:"Stay Awake (with Madeon)",time:"3:26"},{name:"Under Control",time:"4:06"},{name:"Flashlight (with DJ Fresh)",time:"3:33"},{name:"How Long Will I Love You (bonus track)",time:"2:34"}]},{name:"Native",artist:"One Republic",heroBg:"",color:"#aa003a",albumArt:e(814),songs:[]},{name:"Comedown Machine",artist:"The Strokes",heroBg:"",albumArt:e(815),color:"#92010d",songs:[]},{name:"G I R L",artist:"Pharrell Williams",heroBg:e(816),albumArt:e(817),color:"#f7bb0e",songs:[{name:"Marilyn Monroe",time:"5:51"},{name:"Brand New (duet with Justin Timberlake)",time:"4:31"},{name:"Hunter",time:"4:00"},{name:"Gush",time:"3:54"},{name:"Happy",time:"3:53"},{name:"Come Get It Bae",time:"3:21"},{name:"Gust of Wind",time:"4:45"},{name:"Lost Queen",time:"7:56"},{name:"Know Who You Are (duet with Alicia Keys)",time:"3:56"},{name:"It Girl",time:"4:49"}],emphasis:!0},{name:"Jamie Lidell",artist:"Jamie Lidell",heroBg:"",color:"#aba9a2",albumArt:e(818),songs:[]},{name:"Rumours",artist:"Fleetwood Mac",heroBg:"",color:"#bdb27b",albumArt:e(819),songs:[]},{name:"Holy Fire",artist:"Foals",heroBg:"",color:"#b19f46",albumArt:e(820),songs:[]}];t.a=r},22:function(n,t,e){"use strict";var r,o=e(68),i=e(243),a=e(0),c=e(7),l=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),s=(function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.data={action:c.a.wait},t}l(t,n),t.prototype.render=function(){return a.createElement(c.c,{data:this.data},this.props.children)}}(a.Component),function(n){var t=n.children,e=n.duration;return a.createElement(c.c,{data:{action:c.a.animation,payload:{beforeAnimate:function(n,t){t()},animate:function(n,t){setTimeout(t,e)},afterAnimate:function(n,t){t()}}}},t)}),u=(e(149),e(244),function(){var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}()),p=function(){return(p=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},f=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={started:!1},t.start=function(){requestAnimationFrame(function(){t.setState({started:!0})})},t.onTransitionEnd=function(n){t.props.onFinish()},t}return u(t,n),t.prototype.componentDidMount=function(){void 0!==this.props.step&&this.start()},t.prototype.componentDidUpdate=function(){void 0===this.props.step||this.state.started||this.start()},t.prototype.render=function(){var n=this.props,t=n.style,e=n.keyframes,r=n.step,o=n.children,i=void 0!==r&&this.state.started;return a.createElement("span",{onTransitionEnd:this.onTransitionEnd,style:p({},t,i?e[r||0]:{})},o)},t}(a.Component),m=function(){var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),d=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=t.props.duration;return t.renderAnimation=function(n){return a.createElement(f,{step:n.step,style:{position:"fixed",top:0,left:0,right:0,bottom:0,background:t.props.background,transform:"translate3d("+{left:"100%, 0, 0",right:"-100%, 0, 0",down:"0, -100%, 0",up:"0, 100%, 0"}[t.props.direction]+")",transition:"transform ease-out "+r+"ms, opacity ease-in-out "+r+"ms"},keyframes:[{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(0, 0, 0)",opacity:0}],onFinish:n.onFinish})},requestAnimationFrame(e),t.renderAnimation({onFinish:e,step:void 0})},t.animate=function(n,e){return t.renderAnimation({onFinish:e,step:0})},t.afterAnimate=function(n,e){return t.renderAnimation({onFinish:e,step:1})},t}return m(t,n),t.prototype.render=function(){var n={action:c.a.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate,afterAnimate:this.afterAnimate}};return a.createElement(c.c,{data:n},this.props.children)},t.defaultProps={duration:500},t}(a.Component),h=e(40),g=e(24),b=function(){var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),y=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.afterAnimate=function(n,e){return t.renderAnimation({onFinish:e,step:1})},t.animate=function(n,e){var r=Object(g.d)(n.fromTarget),o=t.props.duration,i=Math.min(r.size.width,r.size.height),c=Object(h.a)(r.size),l=Object(g.a)(r),s=Object(g.b)(),u=Object(h.a)({width:window.innerWidth,height:window.innerHeight}),p={width:s.left-l.left,height:s.top-l.top},m=Object(h.a)(p),d=Math.ceil((u+m)/i);return t.renderAnimation=function(n){return a.createElement(f,{key:"circle-expand",style:{left:r.location.left-(c-r.size.width)/2,top:r.location.top-(c-r.size.height)/2,width:c,height:c,borderRadius:"50%",position:"absolute",background:t.props.background,zIndex:1110,transition:"transform ease-in "+o+"ms, opacity ease-in "+o/2+"ms",transform:"scale(1)",willChange:"transform",opacity:1},keyframes:[{transform:"scale("+d+")"},{transform:"scale("+d+")",opacity:0}],step:n.step,onFinish:n.onFinish})},t.renderAnimation({onFinish:e,step:0})},t}return b(t,n),t.prototype.render=function(){var n={action:c.a.animation,payload:{animate:this.animate,afterAnimate:this.afterAnimate}};return a.createElement(c.c,{data:n},this.props.children)},t.defaultProps={duration:500},t}(a.Component),x=function(){var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),v=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=t.props.duration,o=Math.min(n.toTarget.size.width,n.toTarget.size.height),i=Object(h.a)(n.toTarget.size),c=Object(g.a)(n.toTarget),l=Object(g.b)(),s=Object(h.a)({width:window.innerWidth,height:window.innerHeight}),u={width:l.left-c.left,height:l.top-c.top},p=Object(h.a)(u),m=Math.ceil((s+p)/o);return t.renderAnimation=function(e){return a.createElement(f,{style:{left:n.toTarget.location.left-(i-n.toTarget.size.width)/2,top:n.toTarget.location.top-(i-n.toTarget.size.height)/2,width:i,height:i,borderRadius:"50%",position:"absolute",background:t.props.background,willChange:"transform",zIndex:1110,transition:"transform ease-out "+r+"ms, opacity ease-out "+r+"ms",transform:"scale("+m+")"},keyframes:[{transform:"scale(1)"},{transform:"scale(1)",opacity:0}],step:e.step,onFinish:e.onFinish})},requestAnimationFrame(function(){return e()}),t.renderAnimation({onFinish:e,step:void 0})},t.animate=function(n,e){return t.renderAnimation({onFinish:e,step:0})},t.afterAnimate=function(n,e){return t.renderAnimation({onFinish:e,step:1})},t}return x(t,n),t.prototype.render=function(){var n={action:c.a.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate,afterAnimate:this.afterAnimate}};return a.createElement(c.c,{data:n},this.props.children)},t.defaultProps={duration:500},t}(a.Component);e(245),e(246),e(150),e(88),e(84);e.d(t,"f",function(){return o.a}),e.d(t,"a",function(){return i.a}),e.d(t,"d",function(){return s}),e.d(t,"e",function(){return d}),e.d(t,"b",function(){return y}),e.d(t,"c",function(){return v})},24:function(n,t,e){"use strict";e.d(t,"c",function(){return i}),e.d(t,"a",function(){return a}),e.d(t,"b",function(){return c}),e.d(t,"d",function(){return l});var r=function(){return(r=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)};function o(){var n=document.documentElement&&document.documentElement.scrollTop?document.documentElement.scrollTop:document.body&&document.body.scrollTop,t=document.documentElement&&document.documentElement.scrollLeft?document.documentElement.scrollLeft:document.body&&document.body.scrollLeft;return{scrollTop:n||0,scrollLeft:t||0}}function i(n,t){void 0===t&&(t={});var e=n.getBoundingClientRect(),r=o(),i=r.scrollLeft,a=r.scrollTop,c=(e.height-n.offsetHeight)/2,l=(e.width-n.offsetWidth)/2;return{size:{width:t.useOffsetSize?n.offsetWidth:e.width,height:t.useOffsetSize?n.offsetHeight:e.height},location:{left:e.left+i+l,top:e.top+a+c},raw:{rect:e,scrollTop:a,scrollLeft:i}}}function a(n){return{top:n.location.top+Math.ceil(n.size.width/2),left:n.location.left-Math.ceil(n.size.height/2)}}function c(){return{left:Math.ceil(window.innerWidth/2),top:Math.ceil(window.innerHeight/2)}}function l(n){var t=o(),e=t.scrollTop,i=t.scrollLeft,a=e-n.raw.scrollTop,c=i-n.raw.scrollLeft;return r({},n,{location:{top:n.location.top+a,left:n.location.left+c}})}},243:function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r,o=e(0),i=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),a=function(){return(a=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},c=o.createContext(void 0),l=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={style:{visibility:"hidden"}},t.onFinish=function(n){t.props.context&&t.props.context.onFinish&&t.props.context.onFinish(n),t.props.name&&n.name!==t.props.name||t.setState({style:{visibility:"visible"}})},t}return i(t,n),t.prototype.render=function(){return o.createElement(c.Provider,{value:{onFinish:this.onFinish}},this.props.children({style:this.state.style}))},t}(o.Component),s=function(n){return function(t){return o.createElement(c.Consumer,null,function(e){return o.createElement(n,a({context:e},t))})}};t.a=s(l)},244:function(n,t,e){"use strict";var r,o=e(0),i=e(7),a=e(40),c=e(24),l=e(88),s=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),u=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e,r){var o=Object(c.d)(n.fromTarget),i=o.location.left-n.toTarget.location.left,l=o.location.top-n.toTarget.location.top,s=t.props.duration,u=t.props.timingFunction,p={zIndex:t.props.zIndex||10001,opacity:1,transformOrigin:"0 0",visibility:"visible",willChange:"transform",transform:"translate3d("+i+"px, "+l+"px, 0) scale3d("+a.b(o.size.width,n.toTarget.size.width)+", "+a.b(o.size.height,n.toTarget.size.height)+", 1)"};r({style:p}),requestAnimationFrame(function(){requestAnimationFrame(function(){r({style:{transition:"transform "+s+"ms "+u+", opacity "+s/2+"ms "+u}}),requestAnimationFrame(e)})})},t.animate=function(n,e,r){r({style:{transform:"translate3d(0, 0, 0) scale3d(1, 1, 1)"}}),setTimeout(function(){return e()},t.props.duration)},t}return s(t,n),t.prototype.render=function(){var n={action:i.a.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate}};return o.createElement(i.c,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:Object(l.a)()},t}(o.Component);t.a=u},245:function(n,t,e){"use strict";var r,o,i,a,c=e(0),l=e(53),s=e(7),u=e(24),p=e(88),f=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),m=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},d=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e,r){if(!n.toTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");var a=t.props.duration,c=t.props.timingFunction,s=Object(u.d)(n.fromTarget),p=s.location.left-n.toTarget.location.left,f=s.location.top-n.toTarget.location.top,d={zIndex:t.props.zIndex||10001,opacity:1,transformOrigin:"0 0",visibility:"visible",willChange:"transform, height, width",transform:t.props.skipInitialTransformOffset?"":"translate3d("+p+"px, "+f+"px, 0)",height:n.toTarget.targetDOMData.size.height,width:n.toTarget.targetDOMData.size.width,overflow:"hidden"};r({style:d,className:Object(l.a)(o||(o=m(["\n        > * {\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "],["\n        > * {\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "])),n.toTarget.targetDOMData.location.left-n.toTarget.location.left,n.toTarget.targetDOMData.location.top-n.toTarget.location.top)}),requestAnimationFrame(function(){requestAnimationFrame(function(){if(!n.toTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");r({style:{transition:"transform "+a+"ms "+c+", height "+a+"ms "+c+", width "+a+"ms "+c},className:Object(l.a)(i||(i=m(["\n            > * {\n              transition: transform ","ms ",";\n              transform: translate3d(\n                -","px,\n                -","px,\n                0\n              );\n            }\n          "],["\n            > * {\n              transition: transform ","ms ",";\n              transform: translate3d(\n                -","px,\n                -","px,\n                0\n              );\n            }\n          "])),a,c,n.toTarget.targetDOMData.location.left-n.toTarget.location.left,n.toTarget.targetDOMData.location.top-n.toTarget.location.top)}),requestAnimationFrame(e)})})},t.animate=function(n,e,r){var o=t.props.duration,i=t.props.timingFunction;r({style:{transform:"translate3d(0, 0, 0)",height:n.toTarget.size.height,width:n.toTarget.size.width},className:Object(l.a)(a||(a=m(["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(0, 0, 0);\n        }\n      "],["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(0, 0, 0);\n        }\n      "])),o,i)}),setTimeout(function(){return e()},t.props.duration)},t}return f(t,n),t.prototype.render=function(){var n={action:s.a.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate}};return c.createElement(s.c,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:Object(p.a)()},t}(c.Component);t.a=d},246:function(n,t,e){"use strict";var r,o,i,a=e(0),c=e(53),l=e(7),s=e(24),u=e(84),p=e(88),f=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),m=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},d=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=t.props.duration,o=t.props.timingFunction,i=Object(s.d)(n.fromTarget);return requestAnimationFrame(function(){return requestAnimationFrame(e)}),n.fromTarget.render({ref:u.a,style:{transition:"transform "+r+"ms "+o+", height "+r+"ms "+o+", width "+r+"ms "+o+", opacity "+r/2+"ms "+o,position:"absolute",transformOrigin:"0 0",willChange:"transform, height, width",zIndex:t.props.zIndex||19999,top:i.location.top,left:i.location.left,height:i.size.height,width:i.size.width,overflow:"hidden"}})},t.animate=function(n,e){if(!n.fromTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");var r=t.props.duration,i=t.props.timingFunction,a=Object(s.d)(n.fromTarget);return setTimeout(e,t.props.duration),n.fromTarget.render({ref:u.a,style:{transition:"transform "+r+"ms "+i+", height "+r+"ms "+i+", width "+r+"ms "+i+", opacity "+r/2+"ms "+i,position:"absolute",transformOrigin:"0 0",willChange:"transform, height, width",zIndex:t.props.zIndex||19999,top:a.location.top,left:a.location.left,height:n.toTarget.size.height,width:n.toTarget.size.width,overflow:"hidden",transform:"translate3d("+(n.toTarget.location.left-n.fromTarget.location.left)+"px, "+(n.toTarget.location.top-n.fromTarget.location.top)+"px, 0)"},className:Object(c.a)(o||(o=m(["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "],["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "])),r,i,n.fromTarget.targetDOMData.location.left-n.fromTarget.location.left,n.fromTarget.targetDOMData.location.top-n.fromTarget.location.top)})},t.afterAnimate=function(n,e,r){if(!n.fromTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");var o=t.props.duration,a=t.props.timingFunction,l=Object(s.d)(n.fromTarget);return r({style:{opacity:1}}),setTimeout(e,100),n.fromTarget.render({ref:u.a,style:{transition:"transform "+o+"ms "+a+", height "+o+"ms "+a+", width "+o+"ms "+a+", opacity "+o/2+"ms "+a,position:"absolute",transformOrigin:"0 0",willChange:"transform, height, width",zIndex:t.props.zIndex||19999,top:l.location.top,left:l.location.left,height:n.toTarget.size.height,width:n.toTarget.size.width,overflow:"hidden",transform:"translate3d("+(n.toTarget.location.left-n.fromTarget.location.left)+"px, "+(n.toTarget.location.top-n.fromTarget.location.top)+"px, 0)",opacity:0},className:Object(c.a)(i||(i=m(["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "],["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "])),o,a,n.fromTarget.targetDOMData.location.left-n.fromTarget.location.left,n.fromTarget.targetDOMData.location.top-n.fromTarget.location.top)})},t}return f(t,n),t.prototype.render=function(){var n={action:l.a.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate,afterAnimate:this.afterAnimate}};return a.createElement(l.c,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:Object(p.a)()},t}(a.Component);t.a=d},252:function(n,t,e){"use strict";e.d(t,"c",function(){return s}),e.d(t,"b",function(){return u}),e.d(t,"a",function(){return p});var r,o,i,a=e(2),c=e(581),l=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},s=Object(a.b)(c.a)(r||(r=l(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n"]))),u=a.b.main(o||(o=l(["\n  box-shadow: 0 1px 40px rgba(32, 33, 36, 0.15);\n  background-color: #fff;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10;\n"],["\n  box-shadow: 0 1px 40px rgba(32, 33, 36, 0.15);\n  background-color: #fff;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10;\n"]))),p=Object(a.b)(c.a)(i||(i=l(["\n  color: white;\n"],["\n  color: white;\n"])))},253:function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=[{name:"Alexander Ovechkin",image:e(794)},{name:"T.J Oshie",image:e(795)},{name:"Braden Holtby",image:e(796)},{name:"Nathan Walker",image:e(797)},{name:"Nicklas Backstrom",image:e(798)},{name:"Evgeny Kuznetsov",image:e(799)},{name:"Devante Smith-Pelly",image:e(800)},{name:"Lars Eller",image:e(801)},{name:"John Carlson",image:e(802)}]},254:function(n,t,e){"use strict";e.d(t,"b",function(){return l}),e.d(t,"c",function(){return s}),e.d(t,"a",function(){return u});var r,o,i,a=e(2),c=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},l=a.b.div(r||(r=c(["\n  margin: 200px 30px;\n  height: 50px;\n  border-radius: 8px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  background: white;\n"],["\n  margin: 200px 30px;\n  height: 50px;\n  border-radius: 8px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  background: white;\n"]))),s=a.b.input(o||(o=c(["\n  border: none;\n  outline: none;\n  line-height: 25px;\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0 0 0 16px;\n  font-size: 16px;\n  word-wrap: break-word;\n  outline: none;\n  display: flex;\n  flex: 1;\n  -webkit-tap-highlight-color: transparent;\n  width: 100%;\n  color: inherit;\n"],["\n  border: none;\n  outline: none;\n  line-height: 25px;\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0 0 0 16px;\n  font-size: 16px;\n  word-wrap: break-word;\n  outline: none;\n  display: flex;\n  flex: 1;\n  -webkit-tap-highlight-color: transparent;\n  width: 100%;\n  color: inherit;\n"]))),u=a.b.div(i||(i=c(["\n  display: flex;\n  justify-content: center;\n  color: rgba(0, 0, 0, 0.87);\n  border-bottom: 1px solid #dfe1e5;\n  position: absolute;\n  margin-top: 26px;\n  top: 0;\n  left: 0;\n  right: 0;\n  background: white;\n"],["\n  display: flex;\n  justify-content: center;\n  color: rgba(0, 0, 0, 0.87);\n  border-bottom: 1px solid #dfe1e5;\n  position: absolute;\n  margin-top: 26px;\n  top: 0;\n  left: 0;\n  right: 0;\n  background: white;\n"])))},40:function(n,t,e){"use strict";function r(n){var t=n.width,e=n.height,r=Math.pow(t,2),o=Math.pow(e,2),i=Math.sqrt(r+o);return Math.ceil(i)}function o(n,t){return n/t}e.d(t,"a",function(){return r}),e.d(t,"b",function(){return o})},44:function(n,t,e){"use strict";e.d(t,"i",function(){return v}),e.d(t,"g",function(){return w}),e.d(t,"d",function(){return E}),e.d(t,"e",function(){return k}),e.d(t,"f",function(){return O}),e.d(t,"k",function(){return _}),e.d(t,"l",function(){return T}),e.d(t,"j",function(){return j}),e.d(t,"b",function(){return A}),e.d(t,"a",function(){return z}),e.d(t,"n",function(){return C}),e.d(t,"m",function(){return P}),e.d(t,"c",function(){return F}),e.d(t,"o",function(){return R}),e.d(t,"h",function(){return D});var r,o,i,a,c,l,s,u,p,f,m,d,h,g,b,y=e(2),x=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},v=y.b.div(r||(r=x(["\n  min-height: 120vh;\n  padding-top: 200px;\n  position: relative;\n  background-color: #fbfbfb;\n  box-sizing: border-box;\n  font-family: Roboto, sans-serif;\n\n  * {\n    box-sizing: border-box;\n  }\n"],["\n  min-height: 120vh;\n  padding-top: 200px;\n  position: relative;\n  background-color: #fbfbfb;\n  box-sizing: border-box;\n  font-family: Roboto, sans-serif;\n\n  * {\n    box-sizing: border-box;\n  }\n"]))),w=y.b.div(o||(o=x(["\n  padding-top: 110px;\n  display: grid;\n  grid-auto-flow: row dense;\n  grid-template-columns: repeat(3, auto);\n  grid-gap: 16px;\n  max-width: 800px;\n  margin: 0 auto;\n"],["\n  padding-top: 110px;\n  display: grid;\n  grid-auto-flow: row dense;\n  grid-template-columns: repeat(3, auto);\n  grid-gap: 16px;\n  max-width: 800px;\n  margin: 0 auto;\n"]))),E=y.b.div(i||(i=x(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  box-shadow: 0 1px 40px rgba(32, 33, 36, 0.1);\n  background-color: #fff;\n  border-radius: 3px;\n  z-index: 1;\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  box-shadow: 0 1px 40px rgba(32, 33, 36, 0.1);\n  background-color: #fff;\n  border-radius: 3px;\n  z-index: 1;\n"]))),k=y.b.div(a||(a=x(["\n  position: relative;\n  height: 130px;\n  z-index: 1;\n  transition: transform ease-in-out 200ms, box-shadow ease-in-out 100ms;\n  cursor: pointer;\n  font-family: Roboto, sans-serif;\n\n  :hover {\n    box-shadow: 0 1px 50px rgba(32, 33, 36, 0.2);\n    transform: translateY(-2px);\n  }\n"],["\n  position: relative;\n  height: 130px;\n  z-index: 1;\n  transition: transform ease-in-out 200ms, box-shadow ease-in-out 100ms;\n  cursor: pointer;\n  font-family: Roboto, sans-serif;\n\n  :hover {\n    box-shadow: 0 1px 50px rgba(32, 33, 36, 0.2);\n    transform: translateY(-2px);\n  }\n"]))),O=y.b.div(c||(c=x(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 8px;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  z-index: 999;\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 8px;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  z-index: 999;\n"]))),_=y.b.div(l||(l=x(["\n  width: 600px;\n  height: 100vh;\n  z-index: 1;\n  margin: 0 auto;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n"],["\n  width: 600px;\n  height: 100vh;\n  z-index: 1;\n  margin: 0 auto;\n  position: relative;\n\n  * {\n    box-sizing: border-box;\n  }\n"]))),T=y.b.div(s||(s=x(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999;\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999;\n"]))),j=y.b.div(u||(u=x(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0 1px 50px rgba(32, 33, 36, 0.2);\n  font-family: Roboto, sans-serif;\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0 1px 50px rgba(32, 33, 36, 0.2);\n  font-family: Roboto, sans-serif;\n"]))),A=y.b.div(p||(p=x(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: #3c71ca;\n  background-image: url('https://cdn.vox-cdn.com/thumbor/vQ3jAr1UBy_9fC4Fhz2Ao6tFBTw=/0x0:3000x2000/1820x1213/filters:focal(1883x395:2363x875):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/60002177/OvechkinWins_Getty_Ringer.0.jpg');\n  background-size: cover;\n  background-position: top center;\n  z-index: 0;\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: #3c71ca;\n  background-image: url('https://cdn.vox-cdn.com/thumbor/vQ3jAr1UBy_9fC4Fhz2Ao6tFBTw=/0x0:3000x2000/1820x1213/filters:focal(1883x395:2363x875):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/60002177/OvechkinWins_Getty_Ringer.0.jpg');\n  background-size: cover;\n  background-position: top center;\n  z-index: 0;\n"]))),z=y.b.div(f||(f=x(["\n  max-width: 1000px;\n  margin: 0 auto;\n  height: 400px;\n  background-color: #cf132b;\n  background-image: url('https://cdn.vox-cdn.com/thumbor/vQ3jAr1UBy_9fC4Fhz2Ao6tFBTw=/0x0:3000x2000/1820x1213/filters:focal(1883x395:2363x875):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/60002177/OvechkinWins_Getty_Ringer.0.jpg');\n  background-size: cover;\n  background-position: top center;\n"],["\n  max-width: 1000px;\n  margin: 0 auto;\n  height: 400px;\n  background-color: #cf132b;\n  background-image: url('https://cdn.vox-cdn.com/thumbor/vQ3jAr1UBy_9fC4Fhz2Ao6tFBTw=/0x0:3000x2000/1820x1213/filters:focal(1883x395:2363x875):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/60002177/OvechkinWins_Getty_Ringer.0.jpg');\n  background-size: cover;\n  background-position: top center;\n"]))),C=y.b.div(m||(m=x(["\n  margin: 0 16px;\n  width: 125px;\n  height: 100px;\n  background-color: #f1f1f1;\n  flex-shrink: 0;\n"],["\n  margin: 0 16px;\n  width: 125px;\n  height: 100px;\n  background-color: #f1f1f1;\n  flex-shrink: 0;\n"]))),P=y.b.img(d||(d=x(["\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n"],["\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n"]))),F=Object(y.b)(C)(h||(h=x(["\n  width: 100%;\n  height: 266px;\n  margin: 0;\n  border-radius: 3px 3px 0 0;\n"],["\n  width: 100%;\n  height: 266px;\n  margin: 0;\n  border-radius: 3px 3px 0 0;\n"]))),R=y.b.div(g||(g=x(["\n  font-size: 20px;\n  font-family: Roboto, sans-serif;\n  margin: 16px;\n  text-align: center;\n  text-transform: uppercase;\n"],["\n  font-size: 20px;\n  font-family: Roboto, sans-serif;\n  margin: 16px;\n  text-align: center;\n  text-transform: uppercase;\n"]))),D=y.b.div(b||(b=x(["\n  position: absolute;\n  top: 400px;\n  left: 0;\n  right: 0;\n  text-transform: uppercase;\n  color: #fff;\n  display: flex;\n  justify-content: space-between;\n  font-size: 200px;\n  width: 100%;\n  overflow: hidden;\n  flex-wrap: wrap;\n  padding: 20px;\n  pointer-events: none;\n  font-weight: bold;\n"],["\n  position: absolute;\n  top: 400px;\n  left: 0;\n  right: 0;\n  text-transform: uppercase;\n  color: #fff;\n  display: flex;\n  justify-content: space-between;\n  font-size: 200px;\n  width: 100%;\n  overflow: hidden;\n  flex-wrap: wrap;\n  padding: 20px;\n  pointer-events: none;\n  font-weight: bold;\n"])))},462:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o,i,a=e(0),c=e(2),l=e(19),s=e(151),u=e.n(s),p=e(22),f=e(13),m=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},d=function(){return(d=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},h=Object(c.b)(u.a)(t||(t=m(["\n  background-color: #f2a2e8;\n  margin: 0;\n  box-sizing: border-box;\n\n  * {\n    box-sizing: border-box;\n  }\n"],["\n  background-color: #f2a2e8;\n  margin: 0;\n  box-sizing: border-box;\n\n  * {\n    box-sizing: border-box;\n  }\n"]))),g=c.b.div(r||(r=m(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-color: ",";\n  font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n  font-size: 24px;\n  padding: 50px;\n  height: calc(100vh - 100px);\n  margin: 50px;\n"],["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-color: ",";\n  font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n  font-size: 24px;\n  padding: 50px;\n  height: calc(100vh - 100px);\n  margin: 50px;\n"])),function(n){return n.color}),b=c.b.button(o||(o=m(["\n  background-color: #baed91;\n  padding: 10px;\n  font-family: inherit;\n  font-size: inherit;\n  cursor: pointer;\n  border: none;\n"],["\n  background-color: #baed91;\n  padding: 10px;\n  font-family: inherit;\n  font-size: inherit;\n  cursor: pointer;\n  border: none;\n"]))),y=c.b.div(i||(i=m(["\n  max-width: 500px;\n  padding-bottom: 20px;\n  text-align: center;\n"],["\n  max-width: 500px;\n  padding-bottom: 20px;\n  text-align: center;\n"])));Object(l.storiesOf)("yubaba/BabaManager",n).add("NoManager",function(){return a.createElement(f.d,null,function(n){var t=n.shown,e=n.toggle;return a.createElement(a.Fragment,null,a.createElement(h,{className:""}),t?a.createElement(g,{color:"#b2cefe"},a.createElement(y,null,"This text was displayed immediately, which might not be what we want!",a.createElement("br",null),a.createElement("br",null),"Thanks to BabaManager we can hide elements until all animations have finished."),a.createElement(p.f,{name:"manager-example-1",key:"2"},function(n){var t=n.ref,r=n.style;return a.createElement(b,{style:r,innerRef:t,onClick:function(){return e()}},"This button was shown after the animation completed.",a.createElement("br",null),"Click me and I'll render the previous page!")})):a.createElement(g,{color:"#f8b88b"},a.createElement(p.f,{name:"manager-example-1",key:"1"},a.createElement(p.d,{duration:500},function(n){var t=n.ref,r=n.style;return a.createElement(b,{style:r,innerRef:t,onClick:function(){return e()}},"Click me and I'll render the next page and start the animation")}))))})}).add("WithManager",function(){return a.createElement(f.d,null,function(n){var t=n.shown,e=n.toggle;return a.createElement("div",null,a.createElement(h,{className:""}),t?a.createElement(p.a,null,function(n){return a.createElement(g,d({},n,{color:"#b2cefe"}),a.createElement(y,null,"This text and container were hidden until the animation completed thanks to BabaManager."),a.createElement(p.f,{name:"manager-example-2",key:"2"},function(n){var t=n.ref,r=n.style;return a.createElement(b,{style:r,innerRef:t,onClick:function(){return e()}},"This button was shown after the animation completed.",a.createElement("br",null),"Click me and I'll render the previous page!")}))}):a.createElement(g,{color:"#f8b88b"},a.createElement(p.f,{name:"manager-example-2",key:"1"},a.createElement(p.d,{duration:500},function(n){var t=n.ref,r=n.style;return a.createElement(b,{style:r,innerRef:t,onClick:function(){return e()}},"Click me and I'll render the next page and start the animation")}))))})})}.call(this,e(45)(n))},474:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o,i=e(2),a=e(0),c=e(19),l=e(22),s=e(13),u=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},p=i.b.div(t||(t=u(["\n  width: 100px;\n  height: 100px;\n  background: #fea3aa;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  cursor: pointer;\n"],["\n  width: 100px;\n  height: 100px;\n  background: #fea3aa;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  cursor: pointer;\n"]))),f=i.b.div(r||(r=u(["\n  height: 500px;\n  width: 50px;\n  flex-shrink: 0;\n"],["\n  height: 500px;\n  width: 50px;\n  flex-shrink: 0;\n"]))),m=i.b.div(o||(o=u(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n"],["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n"])));Object(c.storiesOf)("yubaba/CircleExpand",n).add("FromStaticPosition",function(){return a.createElement(s.d,null,function(n){var t=n.shown,e=n.toggle;return a.createElement("div",null,t?a.createElement(m,{onClick:function(){return e()},style:{cursor:"pointer"}},a.createElement(l.f,{name:"circle-expand-square",key:"2"},function(n){var t=n.ref,e=n.style;return a.createElement("div",{style:e,ref:t})})):a.createElement(m,null,a.createElement(l.f,{name:"circle-expand-square",key:"1"},a.createElement(l.b,{background:"#fea3aa"},function(n){var t=n.ref,r=n.style;return a.createElement(p,{onClick:function(){return e()},style:r,innerRef:t})}))))})}).add("ToLongPage",function(){return a.createElement(s.d,null,function(n){var t=n.shown,e=n.toggle;return a.createElement("div",null,t?a.createElement(m,{key:"22",onClick:function(){return e()},style:{cursor:"pointer"}},a.createElement(f,null),a.createElement(f,null),a.createElement(l.f,{name:"page-with-different-scroll",key:"2"},function(n){var t=n.ref,e=n.style;return a.createElement("div",{style:e,ref:t})}),a.createElement(f,null),a.createElement(f,null)):a.createElement(m,{key:"11"},a.createElement(f,null),a.createElement(l.f,{name:"page-with-different-scroll",key:"1"},a.createElement(l.b,{background:"#fea3aa"},function(n){var t=n.ref,r=n.style;return a.createElement(p,{onClick:function(){return e()},style:r,innerRef:t})})),a.createElement(f,null)))})})}.call(this,e(45)(n))},475:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o,i,a=e(2),c=e(0),l=e(19),s=e(151),u=e.n(s),p=e(22),f=e(13),m=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},d=a.b.div(t||(t=m(["\n  width: 100px;\n  height: 100px;\n  background: #faf884;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n"],["\n  width: 100px;\n  height: 100px;\n  background: #faf884;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n"]))),h=a.b.div(r||(r=m(["\n  display: flex;\n  background: ",";\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n"],["\n  display: flex;\n  background: ",";\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n"])),function(n){return n.background||""}),g=Object(a.b)(u.a)(o||(o=m(["\n  margin: 0;\n"],["\n  margin: 0;\n"]))),b=a.b.div(i||(i=m(["\n  height: 500px;\n  flex-shrink: 0;\n"],["\n  height: 500px;\n  flex-shrink: 0;\n"])));Object(l.storiesOf)("yubaba/CircleShrink",n).add("Default",function(){return c.createElement(f.d,null,function(n){var t=n.shown,e=n.toggle;return c.createElement("div",null,c.createElement(g,{className:""}),t?c.createElement(h,{background:"white"},c.createElement(p.f,{name:"circle-shrink-square",key:"2"},function(n){var t=n.ref,r=n.style;return c.createElement(d,{onClick:function(){return e()},style:r,innerRef:t})})):c.createElement(h,{background:"#faf884",onClick:function(){return e()},style:{cursor:"pointer"}},c.createElement(p.f,{name:"circle-shrink-square",key:"1"},c.createElement(p.c,{background:"#faf884"},function(n){var t=n.ref,e=n.style;return c.createElement("div",{style:e,ref:t})}))))})}).add("ToLongPage",function(){return c.createElement(f.d,null,function(n){var t=n.shown,e=n.toggle;return c.createElement("div",null,c.createElement(g,{className:""}),t?c.createElement(h,null,c.createElement(b,null),c.createElement(b,null),c.createElement(p.f,{name:"page-with-different-scroll-shrink",key:"2"},function(n){var t=n.ref,r=n.style;return c.createElement(d,{onClick:function(){return e()},style:r,innerRef:t})}),c.createElement(b,null),c.createElement(b,null)):c.createElement(h,{background:"#faf884",onClick:function(){return e()},style:{cursor:"pointer"}},c.createElement(b,null),c.createElement(p.f,{name:"page-with-different-scroll-shrink",key:"1"},c.createElement(p.c,{background:"#faf884"},function(n){var t=n.ref,e=n.style;return c.createElement(d,{style:e,innerRef:t})})),c.createElement(b,null)))})})}.call(this,e(45)(n))},476:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o,i=e(0),a=e(19),c=e(2),l=e(13),s=e(68),u=e(150),p=e(246),f=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},m=function(){return(m=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},d=c.b.div(t||(t=f(["\n  margin: 100px auto;\n  display: flex;\n  justify-content: center;\n"],["\n  margin: 100px auto;\n  display: flex;\n  justify-content: center;\n"]))),h=c.b.div(r||(r=f(["\n  background: #fea3aa;\n  height: ","px;\n  width: ","px;\n\n  position: relative;\n  cursor: pointer;\n\n  &:before {\n    content: 'click me';\n    text-align: center;\n    left: 0;\n    right: 0;\n    position: absolute;\n    color: white;\n    font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n    top: 70%;\n  }\n\n  &:after {\n    content: 'ðŸ˜Š';\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 50px;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    pointer-events: none;\n  }\n"],["\n  background: #fea3aa;\n  height: ","px;\n  width: ","px;\n\n  position: relative;\n  cursor: pointer;\n\n  &:before {\n    content: 'click me';\n    text-align: center;\n    left: 0;\n    right: 0;\n    position: absolute;\n    color: white;\n    font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n    top: 70%;\n  }\n\n  &:after {\n    content: 'ðŸ˜Š';\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 50px;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    pointer-events: none;\n  }\n"])),function(n){return n.height},function(n){return n.width}),g=c.b.div(o||(o=f(["\n  display: flex;\n  align-items: center;\n  background: #baed91;\n  height: ","px;\n  width: ","px;\n"],["\n  display: flex;\n  align-items: center;\n  background: #baed91;\n  height: ","px;\n  width: ","px;\n"])),function(n){return"both"===n.orientation||"vertical"===n.orientation?3*n.height:n.height},function(n){return"both"===n.orientation||"horizontal"===n.orientation?3*n.width:n.width}),b=function(n,t,e){return i.createElement(l.d,null,function(r){var o=r.shown,a=r.toggle;return i.createElement(i.Fragment,null,o&&i.createElement(s.a,{name:"conceal-move-"+e},function(e){return i.createElement(h,{onClick:function(){return a()},style:e.style,className:e.className,innerRef:e.ref,width:n,height:t})}),o||i.createElement(s.a,{name:"conceal-move-"+e},i.createElement(p.a,null,function(r){return i.createElement("div",m({},r),i.createElement(g,{width:n,height:t,orientation:e},i.createElement(u.a,null,function(e){return i.createElement(h,{width:n,height:t,onClick:function(){return a()},innerRef:e.ref})})))})))})};Object(a.storiesOf)("yubaba/ConcealMove",n).addDecorator(function(n){return i.createElement(d,null,n())}).add("TargetHeight",function(){return b(200,200,"vertical")}).add("TargetWidth",function(){return b(200,200,"horizontal")}).add("TargetBoth",function(){return b(200,200,"both")})}.call(this,e(45)(n))},477:function(n,t,e){"use strict";e.r(t),function(n){var t=e(19),r=e(68),o=e(149),i=e(13),a=Object(i.e)({namePrefix:"CrossFadeMove",useDistinctEnd:!0})(r.a,o.a),c=Object(t.storiesOf)("yubaba/CrossFadeMove",n);Object.keys(a).forEach(function(n){return c.add(n,a[n])})}.call(this,e(45)(n))},478:function(n,t,e){"use strict";e.r(t),function(n){var t=e(19),r=e(68),o=e(244),i=e(13),a=Object(i.e)({namePrefix:"FLIPMove",useDistinctEnd:!1})(r.a,o.a),c=Object(t.storiesOf)("yubaba/FLIPMove",n);Object.keys(a).forEach(function(n){return c.add(n,a[n])})}.call(this,e(45)(n))},479:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o,i=e(0),a=e(19),c=e(2),l=e(13),s=e(68),u=e(7),p=e(150),f=e(245),m=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},d=function(){return(d=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},h=c.b.div(t||(t=m(["\n  margin: 100px auto;\n  display: flex;\n  justify-content: center;\n"],["\n  margin: 100px auto;\n  display: flex;\n  justify-content: center;\n"]))),g=c.b.div(r||(r=m(["\n  background: #fea3aa;\n  height: ","px;\n  width: ","px;\n\n  position: relative;\n  cursor: pointer;\n\n  &:before {\n    content: 'click me';\n    text-align: center;\n    left: 0;\n    right: 0;\n    position: absolute;\n    color: white;\n    font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n    top: 70%;\n  }\n\n  &:after {\n    content: 'ðŸ˜Š';\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 50px;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    pointer-events: none;\n  }\n"],["\n  background: #fea3aa;\n  height: ","px;\n  width: ","px;\n\n  position: relative;\n  cursor: pointer;\n\n  &:before {\n    content: 'click me';\n    text-align: center;\n    left: 0;\n    right: 0;\n    position: absolute;\n    color: white;\n    font-family: Roboto, HelveticaNeue, Arial, sans-serif;\n    top: 70%;\n  }\n\n  &:after {\n    content: 'ðŸ˜Š';\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 50px;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    pointer-events: none;\n  }\n"])),function(n){return n.height},function(n){return n.width}),b=c.b.div(o||(o=m(["\n  display: flex;\n  align-items: center;\n  background: #baed91;\n  height: ","px;\n  width: ","px;\n"],["\n  display: flex;\n  align-items: center;\n  background: #baed91;\n  height: ","px;\n  width: ","px;\n"])),function(n){return"both"===n.orientation||"vertical"===n.orientation?3*n.height:n.height},function(n){return"both"===n.orientation||"horizontal"===n.orientation?3*n.width:n.width}),y=function(n,t,e){return i.createElement(l.d,null,function(r){var o=r.shown,a=r.toggle;return i.createElement(i.Fragment,null,o||i.createElement(s.a,{name:"reveal-move-"+e},i.createElement(f.a,{skipInitialTransformOffset:"both"===e||"horizontal"===e},function(e){return i.createElement(g,{onClick:function(){return a()},style:e.style,className:e.className,innerRef:e.ref,width:n,height:t})})),o&&i.createElement(s.a,{name:"reveal-move-"+e},i.createElement(u.c,null,function(r){return i.createElement("div",d({},r),i.createElement(b,{width:n,height:t,orientation:e},i.createElement(p.a,null,function(e){return i.createElement(g,{width:n,height:t,onClick:function(){return a()},innerRef:e.ref})})))})))})};Object(a.storiesOf)("yubaba/RevealMove",n).addDecorator(function(n){return i.createElement(h,null,n())}).add("TargetHeight",function(){return y(200,200,"vertical")}).add("TargetWidth",function(){return y(200,200,"horizontal")}).add("TargetBoth",function(){return y(200,200,"both")})}.call(this,e(45)(n))},480:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o=e(2),i=e(0),a=e(19),c=e(22),l=e(13),s=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},u=o.b.div(t||(t=s(["\n  width: 100px;\n  height: 100px;\n  background: #db6f59;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n"],["\n  width: 100px;\n  height: 100px;\n  background: #db6f59;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n"]))),p=o.b.div(r||(r=s(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n"],["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n"]))),f=function(n){return i.createElement(l.d,null,function(t){var e=t.shown,r=t.toggle;return i.createElement("div",null,i.createElement(l.c,{onClick:function(){return r()}},"toggle"),e?i.createElement(p,null,i.createElement(c.f,{name:"swipe-"+n,key:"2"},function(n){var t=n.ref,e=n.style;return i.createElement("div",{style:e,ref:t})})):i.createElement(p,null,i.createElement(c.f,{name:"swipe-"+n,key:"1"},i.createElement(c.e,{background:"#db6f59",direction:n},function(n){var t=n.ref,e=n.style;return i.createElement(u,{style:e,innerRef:t})}))))})};Object(a.storiesOf)("yubaba/Swipe",n).add("Up",function(){return f("up")}).add("Down",function(){return f("down")}).add("Left",function(){return f("left")}).add("Right",function(){return f("right")})}.call(this,e(45)(n))},576:function(n,t,e){"use strict";var r,o,i,a,c,l,s,u=e(0),p=e(2),f=e(152),m=e.n(f),d=e(6),h=e(4),g=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},b=p.b.div(r||(r=g(["\n  position: relative;\n  width: ",";\n  height: ",";\n  flex-shrink: 0;\n  grid-column: ",";\n  grid-row: ",";\n  background: ",";\n"],["\n  position: relative;\n  width: ",";\n  height: ",";\n  flex-shrink: 0;\n  grid-column: ",";\n  grid-row: ",";\n  background: ",";\n"])),function(n){return n.emphasis?"100%":"250px"},function(n){return n.emphasis?"100%":"332px"},function(n){return n.emphasis?"span 2":""},function(n){return n.emphasis?"span 2":""},function(n){return n.color||""}),y=p.b.img(o||(o=g(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  cursor: pointer;\n  width: 100%;\n  bottom: ",";\n"],["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  cursor: pointer;\n  width: 100%;\n  bottom: ",";\n"])),function(n){return n.emphasis?"130px":"70px"}),x=p.b.div(i||(i=g(["\n  display: grid;\n  grid-template: ",";\n  box-sizing: border-box;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  color: #ffffffde;\n  padding: 12px;\n  font-family: Roboto, sans-serif;\n  height: 25%;\n"],["\n  display: grid;\n  grid-template: ",";\n  box-sizing: border-box;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  color: #ffffffde;\n  padding: 12px;\n  font-family: Roboto, sans-serif;\n  height: 25%;\n"])),function(n){return n.emphasis?"'title star' auto\n    'context star' auto":"'title star' auto\n    "}),v=p.b.div(a||(a=g(["\n  font-size: ",";\n  white-space: nowrap;\n  grid-area: title;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"],["\n  font-size: ",";\n  white-space: nowrap;\n  grid-area: title;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"])),function(n){return n.emphasis?"1.25em":"1em"}),w=p.b.div(c||(c=g(["\n  margin-top: 5px;\n  font-size: 0.85em;\n  grid-area: subtitle;\n  justify-content: flex-start;\n  font-weight: 300;\n"],["\n  margin-top: 5px;\n  font-size: 0.85em;\n  grid-area: subtitle;\n  justify-content: flex-start;\n  font-weight: 300;\n"]))),E=p.b.div(l||(l=g(["\n  grid-area: star;\n  justify-self: flex-end;\n  align-self: ",";\n"],["\n  grid-area: star;\n  justify-self: flex-end;\n  align-self: ",";\n"])),function(n){return n.emphasis?"flex-start":"center"}),k=p.b.div(s||(s=g(["\n  align-self: flex-end;\n  font-style: italic;\n  grid-area: context;\n  font-size: 0.7em;\n"],["\n  align-self: flex-end;\n  font-style: italic;\n  grid-area: context;\n  font-size: 0.7em;\n"])));t.a=function(n){var t=n.emphasis,e=n.albumArt,r=n.color,o=n.artist,i=n.onClick,a=n.name,c=n.baba,l=n.expand,s=l?d.b:d.d;return u.createElement(b,{emphasis:t,color:r},u.createElement(d.k,{name:c},u.createElement(s,{background:r},u.createElement(d.g,{delay:l?100:0},function(n){var t=n.ref,r=n.style;return u.createElement(y,{onClick:i,src:e,style:r,innerRef:t})}))),u.createElement(x,{emphasis:t},u.createElement(v,{emphasis:t},a,u.createElement(w,null,o)),u.createElement(E,{emphasis:t},u.createElement(h.e,{color:"inherit","aria-label":"Menu"},u.createElement(m.a,null))),t&&u.createElement(k,null,"Recently added")))}},577:function(n,t,e){"use strict";var r,o,i,a,c,l,s,u,p,f,m,d,h=e(0),g=e(2),b=e(4),y=e(578),x=e.n(y),v=e(142),w=e.n(v),E=e(152),k=e.n(E),O=e(454),_=e(6),T=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},j=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),A=g.b.div(o||(o=T(["\n  width: 900px;\n  margin: 0 auto;\n  color: ",";\n  font-family: Roboto, sans-serif;\n  padding-top: 150px;\n  padding-bottom: 124px;\n"],["\n  width: 900px;\n  margin: 0 auto;\n  color: ",";\n  font-family: Roboto, sans-serif;\n  padding-top: 150px;\n  padding-bottom: 124px;\n"])),function(n){return"#000"===Object(O.b)(n.color)?"#000000b0":"white"}),z=g.b.div(i||(i=T(["\n  display: grid;\n  background: ",";\n  grid-template:\n    'album info' auto\n    'album released' auto;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: 1fr auto;\n"],["\n  display: grid;\n  background: ",";\n  grid-template:\n    'album info' auto\n    'album released' auto;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: 1fr auto;\n"])),function(n){return n.color}),C=g.b.img(a||(a=T(["\n  height: 300px;\n  width: 300px;\n  grid-area: album;\n"],["\n  height: 300px;\n  width: 300px;\n  grid-area: album;\n"]))),P=g.b.div(c||(c=T(["\n  background: ",";\n  padding: 30px;\n  grid-area: released;\n  position: relative;\n  opacity: 0.9;\n"],["\n  background: ",";\n  padding: 30px;\n  grid-area: released;\n  position: relative;\n  opacity: 0.9;\n"])),function(n){return n.color}),F=g.b.div(l||(l=T(["\n  grid-area: info;\n  display: flex;\n  align-items: center;\n  padding: 30px;\n  flex-wrap: wrap;\n  position: relative;\n  opacity: 0.9;\n"],["\n  grid-area: info;\n  display: flex;\n  align-items: center;\n  padding: 30px;\n  flex-wrap: wrap;\n  position: relative;\n  opacity: 0.9;\n"]))),R=g.b.div(s||(s=T(["\n  width: 100%;\n  margin-bottom: 20px;\n  font-size: 3em;\n"],["\n  width: 100%;\n  margin-bottom: 20px;\n  font-size: 3em;\n"]))),D=g.b.div(u||(u=T(["\n  width: 100%;\n"],["\n  width: 100%;\n"]))),M=Object(g.b)(b.c)(p||(p=T(["\n  border-radius: 50% !important;\n  height: 48px;\n  width: 48px;\n  top: -26px;\n  position: absolute;\n  right: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n"],["\n  border-radius: 50% !important;\n  height: 48px;\n  width: 48px;\n  top: -26px;\n  position: absolute;\n  right: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n"]))),I=g.b.div(f||(f=T(["\n  position: absolute;\n  top: 18px;\n  right: 12px;\n"],["\n  position: absolute;\n  top: 18px;\n  right: 12px;\n"]))),N=g.b.span(m||(m=T(["\n  margin-right: 20px;\n"],["\n  margin-right: 20px;\n"]))),S=Object(g.b)(b.c)(d||(d=T(["\n  border-bottom-left-radius: 0 !important;\n  border-bottom-right-radius: 0 !important;\n"],["\n  border-bottom-left-radius: 0 !important;\n  border-bottom-right-radius: 0 !important;\n"]))),B=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return j(t,n),t.prototype.render=function(){var n=this.props,t=n.baba,e=n.color,r=n.shrink,o=n.wait,i=n.albumArt,a=n.name,c=n.artist,l=n.songs,s=r?_.c:_.d,u=o?_.j:_.d;return h.createElement(A,{color:e},h.createElement(S,{raised:!0,elevation:20,style:{minHeight:"90vh",overflow:"visible"}},h.createElement(z,{color:e},h.createElement(_.k,{name:t},h.createElement(_.g,null,h.createElement(u,null,h.createElement(s,{background:e},function(n){var t=n.ref,e=n.style;return h.createElement(C,{src:i,style:e,innerRef:t})})))),h.createElement(F,null,h.createElement(I,null,h.createElement(b.e,{color:"inherit","aria-label":"Menu"},h.createElement(k.a,null)),h.createElement(b.e,{color:"inherit","aria-label":"Menu"},h.createElement(w.a,null))),h.createElement("div",null,h.createElement(R,null,a),h.createElement(D,null,c))),h.createElement(P,{color:Object(O.a)(.1)(e)},"Released March, 2013",h.createElement(M,null,h.createElement(b.e,null,h.createElement(x.a,null))))),h.createElement(b.i,{style:{marginLeft:"5%",width:"92%"}},h.createElement(b.l,null,h.createElement(b.m,null,h.createElement(b.k,null,h.createElement("strong",null,"Track")),h.createElement(b.k,null,h.createElement("strong",null,"Artist")),h.createElement(b.k,{numeric:!0},h.createElement("strong",null,"Time")))),h.createElement(b.j,null,l.map(function(n,t){return h.createElement(b.m,null,h.createElement(b.k,null,h.createElement(N,null,t+1)," ",n.name),h.createElement(b.k,null,c),h.createElement(b.k,{numeric:!0},n.time))})))))},t}(h.Component);t.a=B},6:function(n,t,e){"use strict";var r,o,i=e(51),a=e.n(i),c=e(155),l=e.n(c),s=e(30),u=e.n(s),p=e(9),f=e.n(p),m=e(8),d=e.n(m),h=e(0),g=e(36),b=(r=function(n,t){return(r=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?f()(t):(e.prototype=t.prototype,new e)}),y=function(){return(y=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)};!function(n){n.animation="animation",n.wait="wait"}(o||(o={}));var x=h.createContext(void 0),v=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return b(t,n),t.prototype.render=function(){var n=this;return"function"!=typeof this.props.children?h.createElement(x.Consumer,null,function(t){return h.createElement(x.Provider,{value:{ref:function(e){n.props.receiveRef&&n.props.receiveRef(e),t&&t.ref(e)},targetRef:function(e){n.props.receiveTargetRef&&n.props.receiveTargetRef(e),t&&t.targetRef(e)},data:function(e){var r=n.props.data?[n.props.data].concat(e):e;t&&t.data(r),n.props.receiveData&&n.props.receiveData(e)},renderChildren:function(e){t&&t.renderChildren(e),n.props.receiveRenderChildren&&n.props.receiveRenderChildren(e)},style:y({},n.props.style,t?t.style:{}),className:n.props.className||(t?t.className:void 0)}},n.props.children)}):h.createElement(x.Consumer,null,function(t){if("function"==typeof n.props.children){if(t){var e=n.props.data?[n.props.data]:[];t.renderChildren(n.props.children),t.data(e)}return n.props.receiveRenderChildren&&n.props.receiveRenderChildren(n.props.children),h.Children.only(n.props.children({className:n.props.className||(t?t.className:void 0),ref:function(e){t&&t.ref(e),n.props.receiveRef&&n.props.receiveRef(e)},style:t?y({},n.props.style,t.style):n.props.style||{}}))}throw new Error("Children is guaranteed to be a function. Impossible condition.")})},t}(h.Component),w=function(){return(w=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)};function E(){var n=document.documentElement&&document.documentElement.scrollTop?document.documentElement.scrollTop:document.body&&document.body.scrollTop,t=document.documentElement&&document.documentElement.scrollLeft?document.documentElement.scrollLeft:document.body&&document.body.scrollLeft;return{scrollTop:n||0,scrollLeft:t||0}}function k(n,t){void 0===t&&(t={});var e=n.getBoundingClientRect(),r=E(),o=r.scrollLeft,i=r.scrollTop,a=(e.height-n.offsetHeight)/2,c=(e.width-n.offsetWidth)/2;return{size:{width:t.useOffsetSize?n.offsetWidth:e.width,height:t.useOffsetSize?n.offsetHeight:e.height},location:{left:e.left+o+c,top:e.top+i+a},raw:{rect:e,scrollTop:i,scrollLeft:o}}}function O(n){return{top:n.location.top+Math.ceil(n.size.width/2),left:n.location.left-Math.ceil(n.size.height/2)}}function _(){return{left:Math.ceil(window.innerWidth/2),top:Math.ceil(window.innerHeight/2)}}function T(n){var t=E(),e=t.scrollTop,r=t.scrollLeft,o=e-n.raw.scrollTop,i=r-n.raw.scrollLeft;return w({},n,{location:{top:n.location.top+o,left:n.location.left+i}})}var j=function(){var n=function(){},t=function(){},e=new a.a(function(e,r){n=e,t=r});return{resolve:n,reject:t,promise:e}},A=e(211),z=new(e.n(A).a),C=function(n){return z.get(n)},P=function(n){return z.has(n)},F=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),R=function(){return(R=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},D=h.createContext(void 0),M=function(n){return function(t){return h.createElement(D.Consumer,null,function(e){return h.createElement(n,R({context:e},t))})}},I=M(function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={style:{visibility:"hidden"}},t.onFinish=function(n){t.props.context&&t.props.context.onFinish&&t.props.context.onFinish(n),t.props.name&&n.name!==t.props.name||t.setState({style:{visibility:"visible"}})},t}return F(t,n),t.prototype.render=function(){return h.createElement(D.Provider,{value:{onFinish:this.onFinish}},this.props.children({style:this.state.style}))},t}(h.Component)),N=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),S=function(){return(S=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},B=function(n,t){var e={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&t.indexOf(r)<0&&(e[r]=n[r]);if(null!=n&&"function"==typeof l.a){var o=0;for(r=l()(n);o<r.length;o++)t.indexOf(r[o])<0&&(e[r[o]]=n[r[o]])}return e},W=M(function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={shown:!1,childProps:{}},t.TIME_TO_WAIT_FOR_NEXT_BABA=50,t.animating=!1,t.unmounting=!1,t.abortAnimations=function(){},t.executeAnimations=function(){var n=C(t.props.name);if(n){n.data;var e=B(n,["data"]);t.animating=!0;var r={fromTarget:e,toTarget:S({render:t.renderChildren,containerElement:t.containerElement,targetElement:t.targetElement,targetDOMData:t.targetElement?k(t.targetElement):void 0},k(t.containerElement))},i=n.data.map(function(n){if(n.action===o.animation){var e,i=function(n){e||(e=document.createElement("div"),document.body.insertBefore(e,document.body.firstChild)),requestAnimationFrame(function(){return Object(g.unstable_renderSubtreeIntoContainer)(t,n,e)})},c={},l=function(n){n?(c=S({},c,n,{style:S({},c.style,n.style),className:n.className}),t.setState({childProps:c})):t.setState({childProps:{}})};return{action:o.animation,payload:{beforeAnimate:function(){if(n.payload.beforeAnimate){var t=j(),e=n.payload.beforeAnimate(r,t.resolve,l);return e&&i(e),t.promise}return a.a.resolve()},animate:function(){var t=j(),e=n.payload.animate(r,t.resolve,l);return e&&i(e),t.promise},afterAnimate:function(){if(n.payload.afterAnimate){var t=j(),e=n.payload.afterAnimate(r,t.resolve,l);return e&&i(e),t.promise}return a.a.resolve()},cleanup:function(){e&&(Object(g.unmountComponentAtNode)(e),document.body.removeChild(e)),l(null)}}}}return n}),c=i.reduce(function(n,t){switch(t.action){case o.animation:return n[n.length-1].push(t.payload),n;case o.wait:return n.push([]),n;default:return n}},[[]]);t.abortAnimations=function(){t.animating&&(t.animating=!1,c.forEach(function(n){return n.forEach(function(n){return n.cleanup()})}))};var l=i.map(function(n){return n.action===o.animation?n.payload.beforeAnimate():a.a.resolve()});a.a.all(l).then(function(){return c.reduce(function(n,t){return n.then(function(){return a.a.all(t.map(function(n){return n.animate()}))})},a.a.resolve()).then(function(){return t.setState({shown:!0}),t.props.context&&t.props.context.onFinish({name:t.props.name}),c.reduce(function(n,t){return n.then(function(){return a.a.all(t.map(function(n){return n.afterAnimate()})).then(function(){})})},a.a.resolve())}).then(function(){c.forEach(function(n){return n.forEach(function(n){return n.cleanup()})})}).then(function(){t.animating=!1,t.props.onFinish&&t.props.onFinish()})})}},t.setRef=function(n){t.containerElement=n},t.setTargetRef=function(n){t.targetElement=n},t.setReactNode=function(n){t.renderChildren=n},t.setData=function(n){t.data=n},t}return N(t,n),t.prototype.componentDidMount=function(){var n=this.props,t=n.in,e=n.name;void 0===t&&P(e)?this.executeAnimations():(void 0===t||t)&&this.showSelfAndNotifyManager()},t.prototype.componentWillUnmount=function(){this.storeDOMData(),this.delayedClearDOMData(),this.abortAnimations(),this.unmounting=!0},t.prototype.componentWillUpdate=function(n){if(!1===n.in&&!0===this.props.in)return this.storeDOMData(),this.delayedClearDOMData(),void this.abortAnimations()},t.prototype.componentDidUpdate=function(n){if(this.props.in!==n.in)return this.props.in?P(this.props.name)?void this.executeAnimations():void this.showSelfAndNotifyManager():void 0},t.prototype.showSelfAndNotifyManager=function(){this.setState({shown:!0}),this.props.context&&this.props.context.onFinish({name:this.props.name})},t.prototype.delayedClearDOMData=function(){var n=this;setTimeout(function(){var t;t=n.props.name,z.delete(t)},this.TIME_TO_WAIT_FOR_NEXT_BABA)},t.prototype.storeDOMData=function(){var n,t;if(!this.unmounting&&this.data){var e=k(this.containerElement),r=this.targetElement?k(this.targetElement):void 0;0,n=this.props.name,t=S({},e,{targetDOMData:r,containerElement:this.containerElement,targetElement:this.targetElement,render:this.renderChildren,data:this.data}),z.set(n,t)}},t.prototype.render=function(){var n=this.state,t=n.childProps,e=n.shown,r=this.props.children;return h.createElement(v,{receiveData:this.setData,receiveRenderChildren:this.setReactNode,receiveRef:this.setRef,receiveTargetRef:this.setTargetRef,style:S({opacity:e?1:0},t.style),className:t.className},"function"==typeof r?r:h.Children.only(r))},t.displayName="Baba",t}(h.PureComponent)),H=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),L=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.data={action:o.wait},t}return H(t,n),t.prototype.render=function(){return h.createElement(v,{data:this.data},this.props.children)},t}(h.Component),q=function(n){var t=n.children,e=n.duration;return h.createElement(v,{data:{action:o.animation,payload:{beforeAnimate:function(n,t){t()},animate:function(n,t){setTimeout(t,e)},afterAnimate:function(n,t){t()}}}},t)};function U(n){var t=n.width,e=n.height,r=Math.pow(t,2),o=Math.pow(e,2),i=Math.sqrt(r+o);return Math.ceil(i)}function G(n,t){return n/t}q.__docgenInfo={description:"@hidden"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/yubaba/dist/es6/packages/yubaba/src/animations/Noop/index.js"]={name:"Noop",docgenInfo:q.__docgenInfo,path:"packages/yubaba/dist/es6/packages/yubaba/src/animations/Noop/index.js"});var J,Y,K,Q,X,V=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),Z=function(){return(Z=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},$=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.started=!1,t.state={state:"from"},t.start=function(){t.started||(t.started=!0,window.setTimeout(function(){t.setState({state:"to"}),window.setTimeout(t.props.onFinish,t.props.duration)},14))},t}return V(t,n),t.prototype.componentDidMount=function(){this.props.start&&this.start()},t.prototype.componentDidUpdate=function(){this.props.start&&this.start()},t.prototype.render=function(){var n=this.props,t=n.from,e=n.to;return h.createElement("span",{style:"from"===this.state.state?t:Z({},t,e)},this.props.children)},t.defaultProps={start:!0},t}(h.Component),nn=function(){},tn=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),en=function(){return(en=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},rn=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=T(n.fromTarget),o=n.toTarget.location.left-r.location.left,i=n.toTarget.location.top-r.location.top,a=r.location.left-n.toTarget.location.left,c=r.location.top-n.toTarget.location.top,l=t.props.duration,s="translate3d(0, 0, 0) scale3d(1, 1, 1)",u=t.props.timingFunction,p={transition:"transform "+l+"ms "+u+", opacity "+l/2+"ms "+u,position:"absolute",transformOrigin:"0 0"};return t.renderAnimation=function(e){return h.createElement(h.Fragment,null,h.createElement($,{key:"1",start:e.start,duration:t.props.duration,from:en({},r.location,p,{transform:s,opacity:1,zIndex:t.props.zIndex||2e4}),to:{transform:"translate3d("+o+"px, "+i+"px, 0) scale3d("+G(n.toTarget.size.width,r.size.width)+", "+G(n.toTarget.size.height,r.size.height)+", 1)",opacity:0},onFinish:e.onFinish},n.fromTarget.render({ref:nn,style:{margin:0,height:r.size.height+"px",width:r.size.width+"px"}})),h.createElement($,{key:"2",start:e.start,duration:t.props.duration,from:en({},n.toTarget.location,p,{transition:"transform "+l+"ms "+u+", opacity 10ms "+u,zIndex:t.props.zIndex?t.props.zIndex-1:19999,opacity:0,transform:"translate3d("+a+"px, "+c+"px, 0) scale3d("+G(r.size.width,n.toTarget.size.width)+", "+G(r.size.height,n.toTarget.size.height)+", 1)"}),to:{opacity:1,transform:s},onFinish:e.onFinish},n.toTarget.render({ref:nn,style:{margin:0,height:n.toTarget.size.height+"px",width:n.toTarget.size.width+"px"}})))},requestAnimationFrame(e),t.renderAnimation({onFinish:e,start:!1})},t.animate=function(n,e){return t.renderAnimation({onFinish:e,start:!0})},t}return tn(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"},t}(h.Component),on=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),an=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e,r){var o=T(n.fromTarget),i=o.location.left-n.toTarget.location.left,a=o.location.top-n.toTarget.location.top,c=t.props.duration,l=t.props.timingFunction,s={zIndex:t.props.zIndex||10001,opacity:1,transformOrigin:"0 0",visibility:"visible",willChange:"transform",transform:"translate3d("+i+"px, "+a+"px, 0) scale3d("+G(o.size.width,n.toTarget.size.width)+", "+G(o.size.height,n.toTarget.size.height)+", 1)"};r({style:s}),requestAnimationFrame(function(){requestAnimationFrame(function(){r({style:{transition:"transform "+c+"ms "+l+", opacity "+c/2+"ms "+l}}),requestAnimationFrame(e)})})},t.animate=function(n,e,r){r({style:{transform:"translate3d(0, 0, 0) scale3d(1, 1, 1)"}}),setTimeout(function(){return e()},t.props.duration)},t}return on(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"},t}(h.Component),cn=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),ln=function(){return(ln=u.a||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},sn=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={started:!1},t.start=function(){requestAnimationFrame(function(){t.setState({started:!0})})},t.onTransitionEnd=function(n){t.props.onFinish()},t}return cn(t,n),t.prototype.componentDidMount=function(){void 0!==this.props.step&&this.start()},t.prototype.componentDidUpdate=function(){void 0===this.props.step||this.state.started||this.start()},t.prototype.render=function(){var n=this.props,t=n.style,e=n.keyframes,r=n.step,o=n.children,i=void 0!==r&&this.state.started;return h.createElement("span",{onTransitionEnd:this.onTransitionEnd,style:ln({},t,i?e[r||0]:{})},o)},t}(h.Component),un=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),pn=(function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=t.props.duration;return t.renderAnimation=function(n){return h.createElement(sn,{step:n.step,style:{position:"fixed",top:0,left:0,right:0,bottom:0,background:t.props.background,transform:"translate3d("+{left:"100%, 0, 0",right:"-100%, 0, 0",down:"0, -100%, 0",up:"0, 100%, 0"}[t.props.direction]+")",transition:"transform ease-out "+r+"ms, opacity ease-in-out "+r+"ms"},keyframes:[{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(0, 0, 0)",opacity:0}],onFinish:n.onFinish})},requestAnimationFrame(e),t.renderAnimation({onFinish:e,step:void 0})},t.animate=function(n,e){return t.renderAnimation({onFinish:e,step:0})},t.afterAnimate=function(n,e){return t.renderAnimation({onFinish:e,step:1})},t}un(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate,afterAnimate:this.afterAnimate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500}}(h.Component),function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}()),fn=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.afterAnimate=function(n,e){return t.renderAnimation({onFinish:e,step:1})},t.animate=function(n,e){var r=T(n.fromTarget),o=t.props.duration,i=Math.min(r.size.width,r.size.height),a=U(r.size),c=O(r),l=_(),s=U({width:window.innerWidth,height:window.innerHeight}),u=U({width:l.left-c.left,height:l.top-c.top}),p=Math.ceil((s+u)/i);return t.renderAnimation=function(n){return h.createElement(sn,{key:"circle-expand",style:{left:r.location.left-(a-r.size.width)/2,top:r.location.top-(a-r.size.height)/2,width:a,height:a,borderRadius:"50%",position:"absolute",background:t.props.background,zIndex:1110,transition:"transform ease-in "+o+"ms, opacity ease-in "+o/2+"ms",transform:"scale(1)",willChange:"transform",opacity:1},keyframes:[{transform:"scale("+p+")"},{transform:"scale("+p+")",opacity:0}],step:n.step,onFinish:n.onFinish})},t.renderAnimation({onFinish:e,step:0})},t}return pn(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{animate:this.animate,afterAnimate:this.afterAnimate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500},t}(h.Component),mn=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),dn=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=t.props.duration,o=Math.min(n.toTarget.size.width,n.toTarget.size.height),i=U(n.toTarget.size),a=O(n.toTarget),c=_(),l=U({width:window.innerWidth,height:window.innerHeight}),s=U({width:c.left-a.left,height:c.top-a.top}),u=Math.ceil((l+s)/o);return t.renderAnimation=function(e){return h.createElement(sn,{style:{left:n.toTarget.location.left-(i-n.toTarget.size.width)/2,top:n.toTarget.location.top-(i-n.toTarget.size.height)/2,width:i,height:i,borderRadius:"50%",position:"absolute",background:t.props.background,willChange:"transform",zIndex:1110,transition:"transform ease-out "+r+"ms, opacity ease-out "+r+"ms",transform:"scale("+u+")"},keyframes:[{transform:"scale(1)"},{transform:"scale(1)",opacity:0}],step:e.step,onFinish:e.onFinish})},requestAnimationFrame(function(){return e()}),t.renderAnimation({onFinish:e,step:void 0})},t.animate=function(n,e){return t.renderAnimation({onFinish:e,step:0})},t.afterAnimate=function(n,e){return t.renderAnimation({onFinish:e,step:1})},t}return mn(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate,afterAnimate:this.afterAnimate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500},t}(h.Component),hn=e(50),gn=e.n(hn),bn=e(53),yn=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),xn=function(n,t){return gn.a?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},vn=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e,r){if(!n.toTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");var o=t.props.duration,i=t.props.timingFunction,a=T(n.fromTarget),c=a.location.left-n.toTarget.location.left,l=a.location.top-n.toTarget.location.top,s={zIndex:t.props.zIndex||10001,opacity:1,transformOrigin:"0 0",visibility:"visible",willChange:"transform, height, width",transform:t.props.skipInitialTransformOffset?"":"translate3d("+c+"px, "+l+"px, 0)",height:n.toTarget.targetDOMData.size.height,width:n.toTarget.targetDOMData.size.width,overflow:"hidden"};r({style:s,className:Object(bn.a)(J||(J=xn(["\n        > * {\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "],["\n        > * {\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "])),n.toTarget.targetDOMData.location.left-n.toTarget.location.left,n.toTarget.targetDOMData.location.top-n.toTarget.location.top)}),requestAnimationFrame(function(){requestAnimationFrame(function(){if(!n.toTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");r({style:{transition:"transform "+o+"ms "+i+", height "+o+"ms "+i+", width "+o+"ms "+i},className:Object(bn.a)(Y||(Y=xn(["\n            > * {\n              transition: transform ","ms ",";\n              transform: translate3d(\n                -","px,\n                -","px,\n                0\n              );\n            }\n          "],["\n            > * {\n              transition: transform ","ms ",";\n              transform: translate3d(\n                -","px,\n                -","px,\n                0\n              );\n            }\n          "])),o,i,n.toTarget.targetDOMData.location.left-n.toTarget.location.left,n.toTarget.targetDOMData.location.top-n.toTarget.location.top)}),requestAnimationFrame(e)})})},t.animate=function(n,e,r){var o=t.props.duration,i=t.props.timingFunction;r({style:{transform:"translate3d(0, 0, 0)",height:n.toTarget.size.height,width:n.toTarget.size.width},className:Object(bn.a)(K||(K=xn(["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(0, 0, 0);\n        }\n      "],["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(0, 0, 0);\n        }\n      "])),o,i)}),setTimeout(function(){return e()},t.props.duration)},t}return yn(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"},t}(h.Component),wn=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),En=function(n,t){return gn.a?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},kn=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.beforeAnimate=function(n,e){var r=t.props.duration,o=t.props.timingFunction,i=T(n.fromTarget);return requestAnimationFrame(function(){return requestAnimationFrame(e)}),n.fromTarget.render({ref:nn,style:{transition:"transform "+r+"ms "+o+", height "+r+"ms "+o+", width "+r+"ms "+o+", opacity "+r/2+"ms "+o,position:"absolute",transformOrigin:"0 0",willChange:"transform, height, width",zIndex:t.props.zIndex||19999,top:i.location.top,left:i.location.left,height:i.size.height,width:i.size.width,overflow:"hidden"}})},t.animate=function(n,e){if(!n.fromTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");var r=t.props.duration,o=t.props.timingFunction,i=T(n.fromTarget);return setTimeout(e,t.props.duration),n.fromTarget.render({ref:nn,style:{transition:"transform "+r+"ms "+o+", height "+r+"ms "+o+", width "+r+"ms "+o+", opacity "+r/2+"ms "+o,position:"absolute",transformOrigin:"0 0",willChange:"transform, height, width",zIndex:t.props.zIndex||19999,top:i.location.top,left:i.location.left,height:n.toTarget.size.height,width:n.toTarget.size.width,overflow:"hidden",transform:"translate3d("+(n.toTarget.location.left-n.fromTarget.location.left)+"px, "+(n.toTarget.location.top-n.fromTarget.location.top)+"px, 0)"},className:Object(bn.a)(Q||(Q=En(["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "],["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "])),r,o,n.fromTarget.targetDOMData.location.left-n.fromTarget.location.left,n.fromTarget.targetDOMData.location.top-n.fromTarget.location.top)})},t.afterAnimate=function(n,e,r){if(!n.fromTarget.targetDOMData)throw new Error("yubaba\ntargetElement was missing.");var o=t.props.duration,i=t.props.timingFunction,a=T(n.fromTarget);return r({style:{opacity:1}}),setTimeout(e,100),n.fromTarget.render({ref:nn,style:{transition:"transform "+o+"ms "+i+", height "+o+"ms "+i+", width "+o+"ms "+i+", opacity "+o/2+"ms "+i,position:"absolute",transformOrigin:"0 0",willChange:"transform, height, width",zIndex:t.props.zIndex||19999,top:a.location.top,left:a.location.left,height:n.toTarget.size.height,width:n.toTarget.size.width,overflow:"hidden",transform:"translate3d("+(n.toTarget.location.left-n.fromTarget.location.left)+"px, "+(n.toTarget.location.top-n.fromTarget.location.top)+"px, 0)",opacity:0},className:Object(bn.a)(X||(X=En(["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "],["\n        > * {\n          transition: transform ","ms ",";\n          transform: translate3d(\n            -","px,\n            -","px,\n            0\n          );\n        }\n      "])),o,i,n.fromTarget.targetDOMData.location.left-n.fromTarget.location.left,n.fromTarget.targetDOMData.location.top-n.fromTarget.location.top)})},t}return wn(t,n),t.prototype.render=function(){var n={action:o.animation,payload:{beforeAnimate:this.beforeAnimate,animate:this.animate,afterAnimate:this.afterAnimate}};return h.createElement(v,{data:n},this.props.children)},t.defaultProps={duration:500,timingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"},t}(h.Component),On=function(){var n=function(t,e){return(n=d.a||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(t,e)};return function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?f()(e):(r.prototype=e.prototype,new r)}}(),_n=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return On(t,n),t.prototype.render=function(){var n=this;return h.createElement(x.Consumer,null,function(t){return n.props.children({ref:t?t.targetRef:nn})})},t}(h.Component);e.d(t,"k",function(){return W}),e.d(t,"a",function(){return I}),e.d(t,"j",function(){return L}),e.d(t,"f",function(){return rn}),e.d(t,"g",function(){return an}),e.d(t,"b",function(){return fn}),e.d(t,"c",function(){return dn}),e.d(t,"h",function(){return vn}),e.d(t,"e",function(){return kn}),e.d(t,"d",function(){return v}),e.d(t,"i",function(){return _n})},669:function(n,t,e){e(256),e(670),n.exports=e(671)},671:function(n,t,e){"use strict";e.r(t),function(n){var t=e(19),r=e(573);Object(r.setOptions)({name:"yubaba (back to github)",url:"https://github.com/madou/yubaba",showStoriesPanel:!0,showAddonPanel:!0,addonPanelInRight:!0});var o=e(690);Object(t.configure)(function(){return o.keys().forEach(o)},n)}.call(this,e(45)(n))},68:function(n,t,e){"use strict";var r,o=e(0),i=e(36),a=e(7),c=e(24),l=function(){var n=function(){},t=function(){},e=new Promise(function(e,r){n=e,t=r});return{resolve:n,reject:t,promise:e}},s=new Map,u=function(n){return s.get(n)},p=function(n){return s.has(n)},f=e(243),m=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),d=function(){return(d=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},h=function(n,t){var e={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&t.indexOf(r)<0&&(e[r]=n[r]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(n);o<r.length;o++)t.indexOf(r[o])<0&&(e[r[o]]=n[r[o]])}return e},g=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={shown:!1,childProps:{}},t.TIME_TO_WAIT_FOR_NEXT_BABA=50,t.animating=!1,t.unmounting=!1,t.abortAnimations=function(){},t.executeAnimations=function(){var n=u(t.props.name);if(n){n.data;var e=h(n,["data"]);t.animating=!0;var r={fromTarget:e,toTarget:d({render:t.renderChildren,containerElement:t.containerElement,targetElement:t.targetElement,targetDOMData:t.targetElement?Object(c.c)(t.targetElement):void 0},Object(c.c)(t.containerElement))},o=n.data.map(function(n){if(n.action===a.a.animation){var e,o=function(n){e||(e=document.createElement("div"),document.body.insertBefore(e,document.body.firstChild)),requestAnimationFrame(function(){return Object(i.unstable_renderSubtreeIntoContainer)(t,n,e)})},c={},s=function(n){n?(c=d({},c,n,{style:d({},c.style,n.style),className:n.className}),t.setState({childProps:c})):t.setState({childProps:{}})};return{action:a.a.animation,payload:{beforeAnimate:function(){if(n.payload.beforeAnimate){var t=l(),e=n.payload.beforeAnimate(r,t.resolve,s);return e&&o(e),t.promise}return Promise.resolve()},animate:function(){var t=l(),e=n.payload.animate(r,t.resolve,s);return e&&o(e),t.promise},afterAnimate:function(){if(n.payload.afterAnimate){var t=l(),e=n.payload.afterAnimate(r,t.resolve,s);return e&&o(e),t.promise}return Promise.resolve()},cleanup:function(){e&&(Object(i.unmountComponentAtNode)(e),document.body.removeChild(e)),s(null)}}}}return n}),s=o.reduce(function(n,t){switch(t.action){case a.a.animation:return n[n.length-1].push(t.payload),n;case a.a.wait:return n.push([]),n;default:return n}},[[]]);t.abortAnimations=function(){t.animating&&(t.animating=!1,s.forEach(function(n){return n.forEach(function(n){return n.cleanup()})}))};var p=o.map(function(n){return n.action===a.a.animation?n.payload.beforeAnimate():Promise.resolve()});Promise.all(p).then(function(){return s.reduce(function(n,t){return n.then(function(){return Promise.all(t.map(function(n){return n.animate()}))})},Promise.resolve()).then(function(){return t.setState({shown:!0}),t.props.context&&t.props.context.onFinish({name:t.props.name}),s.reduce(function(n,t){return n.then(function(){return Promise.all(t.map(function(n){return n.afterAnimate()})).then(function(){})})},Promise.resolve())}).then(function(){s.forEach(function(n){return n.forEach(function(n){return n.cleanup()})})}).then(function(){t.animating=!1,t.props.onFinish&&t.props.onFinish()})})}},t.setRef=function(n){t.containerElement=n},t.setTargetRef=function(n){t.targetElement=n},t.setReactNode=function(n){t.renderChildren=n},t.setData=function(n){t.data=n},t}return m(t,n),t.prototype.componentDidMount=function(){var n=this.props,t=n.in,e=n.name;void 0===t&&p(e)?this.executeAnimations():(void 0===t||t)&&this.showSelfAndNotifyManager()},t.prototype.componentWillUnmount=function(){this.storeDOMData(),this.delayedClearDOMData(),this.abortAnimations(),this.unmounting=!0},t.prototype.componentWillUpdate=function(n){if(!1===n.in&&!0===this.props.in)return this.storeDOMData(),this.delayedClearDOMData(),void this.abortAnimations()},t.prototype.componentDidUpdate=function(n){if(this.props.in!==n.in)return this.props.in?p(this.props.name)?void this.executeAnimations():void this.showSelfAndNotifyManager():void 0},t.prototype.showSelfAndNotifyManager=function(){this.setState({shown:!0}),this.props.context&&this.props.context.onFinish({name:this.props.name})},t.prototype.delayedClearDOMData=function(){var n=this;setTimeout(function(){var t;t=n.props.name,s.delete(t)},this.TIME_TO_WAIT_FOR_NEXT_BABA)},t.prototype.storeDOMData=function(){var n,t;if(!this.unmounting&&this.data){var e=Object(c.c)(this.containerElement),r=this.targetElement?Object(c.c)(this.targetElement):void 0;0,n=this.props.name,t=d({},e,{targetDOMData:r,containerElement:this.containerElement,targetElement:this.targetElement,render:this.renderChildren,data:this.data}),s.set(n,t)}},t.prototype.render=function(){var n=this.state,t=n.childProps,e=n.shown,r=this.props.children;return o.createElement(a.c,{receiveData:this.setData,receiveRenderChildren:this.setReactNode,receiveRef:this.setRef,receiveTargetRef:this.setTargetRef,style:d({opacity:e?1:0},t.style),className:t.className},"function"==typeof r?r:o.Children.only(r))},t.displayName="Baba",t}(o.PureComponent);t.a=Object(f.b)(g)},690:function(n,t,e){var r={"./yubaba-examples/node_modules/yubaba/src/BabaManager/stories.tsx":462,"./yubaba-examples/node_modules/yubaba/src/animations/CircleExpand/stories.tsx":474,"./yubaba-examples/node_modules/yubaba/src/animations/CircleShrink/stories.tsx":475,"./yubaba-examples/node_modules/yubaba/src/animations/ConcealMove/stories.tsx":476,"./yubaba-examples/node_modules/yubaba/src/animations/CrossFadeMove/stories.tsx":477,"./yubaba-examples/node_modules/yubaba/src/animations/FLIPMove/stories.tsx":478,"./yubaba-examples/node_modules/yubaba/src/animations/RevealMove/stories.tsx":479,"./yubaba-examples/node_modules/yubaba/src/animations/Swipe/stories.tsx":480,"./yubaba-examples/src/parentChild/emailThreads/stories.tsx":753,"./yubaba-examples/src/parentChild/hockeyCards/stories.tsx":793,"./yubaba-examples/src/parentChild/imageSearch/stories.tsx":803,"./yubaba-examples/src/parentChild/musicPlayer/stories.tsx":810,"./yubaba-examples/src/transformation/searchBar/stories.tsx":821,"./yubaba/src/BabaManager/stories.tsx":462,"./yubaba/src/animations/CircleExpand/stories.tsx":474,"./yubaba/src/animations/CircleShrink/stories.tsx":475,"./yubaba/src/animations/ConcealMove/stories.tsx":476,"./yubaba/src/animations/CrossFadeMove/stories.tsx":477,"./yubaba/src/animations/FLIPMove/stories.tsx":478,"./yubaba/src/animations/RevealMove/stories.tsx":479,"./yubaba/src/animations/Swipe/stories.tsx":480};function o(n){var t=i(n);return e(t)}function i(n){var t=r[n];if(!(t+1)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return t}o.keys=function(){return Object.keys(r)},o.resolve=i,n.exports=o,o.id=690},7:function(n,t,e){"use strict";e.d(t,"a",function(){return o}),e.d(t,"b",function(){return l});var r,o,i=e(0),a=(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),c=function(){return(c=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)};!function(n){n.animation="animation",n.wait="wait"}(o||(o={}));var l=i.createContext(void 0),s=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return a(t,n),t.prototype.render=function(){var n=this;return"function"!=typeof this.props.children?i.createElement(l.Consumer,null,function(t){return i.createElement(l.Provider,{value:{ref:function(e){n.props.receiveRef&&n.props.receiveRef(e),t&&t.ref(e)},targetRef:function(e){n.props.receiveTargetRef&&n.props.receiveTargetRef(e),t&&t.targetRef(e)},data:function(e){var r=n.props.data?[n.props.data].concat(e):e;t&&t.data(r),n.props.receiveData&&n.props.receiveData(e)},renderChildren:function(e){t&&t.renderChildren(e),n.props.receiveRenderChildren&&n.props.receiveRenderChildren(e)},style:c({},n.props.style,t?t.style:{}),className:n.props.className||(t?t.className:void 0)}},n.props.children)}):i.createElement(l.Consumer,null,function(t){if("function"==typeof n.props.children){if(t){var e=n.props.data?[n.props.data]:[];t.renderChildren(n.props.children),t.data(e)}return n.props.receiveRenderChildren&&n.props.receiveRenderChildren(n.props.children),i.Children.only(n.props.children({className:n.props.className||(t?t.className:void 0),ref:function(e){t&&t.ref(e),n.props.receiveRef&&n.props.receiveRef(e)},style:t?c({},n.props.style,t.style):n.props.style||{}}))}throw new Error("Children is guaranteed to be a function. Impossible condition.")})},t}(i.Component);t.c=s},753:function(n,t,e){"use strict";e.r(t),function(n){var t=e(0),r=e(36),o=e(19),i=e(452),a=e(1115),c=e(255),l=e(1114),s=e(6),u=e(13),p=e(154),f=e.n(p),m=e(213),d=e.n(m),h=e(142),g=e.n(h),b=e(453),y=e.n(b),x=e(152),v=e.n(x),w=e(153),E=e.n(w),k=e(4),O=e(252),_=e(156),T=function(){return(T=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},j=function(n){return t.createElement(t.Fragment,null,t.createElement(k.o,{gutterBottom:!0,variant:"subheading",color:"inherit",style:{marginTop:20,marginLeft:22}},"Today"),t.createElement(k.f,null,_.a.map(function(e,o){return t.createElement(t.Fragment,{key:o},t.createElement(s.k,{name:"card-"+o,in:n.in},t.createElement(s.h,{duration:600},function(n){return t.createElement(k.g,{innerRef:function(t){return n.ref(Object(r.findDOMNode)(t))},style:n.style,button:!0},t.createElement(k.b,null,t.createElement(y.a,null)),t.createElement(k.h,{primary:e.title,secondary:e.recipients+" - "+e.body,secondaryTypographyProps:{noWrap:!0}}),t.createElement(O.c,{to:"/screen/"+o}))})),t.createElement(k.d,{inset:!0,component:"li"}))})))},A=function(n){return t.createElement(s.k,{name:"card-"+n.index},t.createElement(s.e,null,function(e){return t.createElement(O.b,T({innerRef:e.ref,style:e.style,className:e.className},n),t.createElement(k.g,null,t.createElement(k.o,{variant:"title"},_.a[n.index].title),t.createElement(k.e,{color:"inherit","aria-label":"Menu",style:{marginLeft:"auto",marginRight:"-10px"}},t.createElement(v.a,null))),t.createElement(k.d,null),t.createElement(s.i,null,function(e){return t.createElement(k.g,{innerRef:function(n){return e.ref(Object(r.findDOMNode)(n))}},t.createElement(k.b,null,t.createElement(y.a,null)),t.createElement(k.h,{primary:_.a[n.index].title,secondary:_.a[n.index].recipients}))}),t.createElement(k.g,null,t.createElement(k.o,{variant:"body2"},_.a[n.index].body)))}))},z=function(){return t.createElement(a.a,null,t.createElement(c.a,{render:function(){return t.createElement(O.a,{to:"/"},t.createElement(k.e,{color:"inherit","aria-label":"Menu",style:{marginLeft:"-15px",marginRight:20}},t.createElement(E.a,null)))},path:"/screen/:index"}),t.createElement(c.a,{path:"*",render:function(){return t.createElement(t.Fragment,null,t.createElement(k.e,{color:"inherit","aria-label":"Menu",style:{marginLeft:"-15px",marginRight:20}},t.createElement(f.a,null)),t.createElement(k.o,{variant:"title",color:"inherit"},"Inbox"))}}))},C=function(n){return void 0===n&&(n="/"),function(){return t.createElement(l.a,{initialEntries:[n]},t.createElement(u.b,{invertColor:!0,appBar:t.createElement(k.a,{position:"static",style:{paddingTop:26,background:"rgb(97, 0, 236)",zIndex:1}},t.createElement(k.n,null,t.createElement(z,null),t.createElement(k.e,{color:"inherit","aria-label":"Menu",style:{marginLeft:"auto"}},t.createElement(d.a,null)),t.createElement(k.e,{color:"inherit","aria-label":"Menu",style:{marginRight:"-15px"}},t.createElement(g.a,null))))},t.createElement(c.a,{render:function(n){return t.createElement(A,{index:n.match.params.index})},path:"/screen/:index"}),t.createElement(c.a,{path:"/",exact:!0},function(n){return t.createElement(j,{in:!!n.match,"aria-hidden":!n.match})})))}};Object(o.storiesOf)("yubaba-examples/ParentChild/EmailThreads",n).add("Default",Object(i.withMarkdownNotes)("")(C())).add("Screen",Object(i.withMarkdownNotes)("")(C("/screen/1")))}.call(this,e(45)(n))},793:function(n,t,e){"use strict";e.r(t),function(n){var t=e(0),r=e(19),o=e(250),i=e.n(o),a=e(4),c=e(13),l=e(6),s=e(44),u=e(253),p=function(){return(p=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)};Object(r.storiesOf)("yubaba-examples/ParentChild/Cards",n).add("Default",function(){return t.createElement(c.d,null,function(n){var e=n.shown,r=n.toggle,o=n.set;return t.createElement(s.i,null,!!e||t.createElement(s.g,null,u.a.map(function(n,e){return t.createElement(s.e,{key:e,onClick:function(){return o(""+e)}},t.createElement(l.a,null,function(r){return t.createElement(t.Fragment,null,t.createElement(l.k,{name:e+"-card"},t.createElement(l.f,{zIndex:999},function(n){var e=n.style,r=n.ref;return t.createElement(s.d,{style:e,innerRef:r})})),t.createElement(s.f,p({},r),t.createElement(l.k,{name:e+"-card-image"},t.createElement(l.f,{zIndex:1e3},function(e){var r=e.style,o=e.ref;return t.createElement(s.n,{style:r,innerRef:o},t.createElement(s.m,{src:n.image}))})),n.name))}))})),!!e&&t.createElement(s.k,null,t.createElement(l.a,null,function(n){return t.createElement(t.Fragment,null,t.createElement(s.l,p({},n),t.createElement(a.e,{color:"default","aria-label":"Menu",style:p({top:5,left:5,position:"absolute"},n.style),onClick:function(){return r()}},t.createElement(i.a,{color:"inherit"})),t.createElement(l.k,{name:e+"-card-image"},t.createElement(l.f,{zIndex:1e3},function(n){var r=n.style,o=n.ref;return t.createElement(s.c,{style:r,innerRef:o},t.createElement(s.m,{src:u.a["string"==typeof e?e:0].image}))})),t.createElement(s.o,null,u.a["string"==typeof e?e:0].name)),t.createElement(l.k,{name:e+"-card"},t.createElement(l.f,{zIndex:999},function(n){var e=n.style,r=n.ref;return t.createElement(s.j,{style:e,innerRef:r})})))})),t.createElement(s.b,null,t.createElement(s.a,null)),t.createElement(s.h,null,"Stanley Cup Champs".split("").map(function(n){return t.createElement("span",{key:n},n)})))})})}.call(this,e(45)(n))},794:function(n,t,e){n.exports=e.p+"1f49f2dbe2917f8b593d9a074d5b3f89.jpg"},795:function(n,t,e){n.exports=e.p+"d41948375fda33296cd89e2e7e9c7469.jpeg"},796:function(n,t,e){n.exports=e.p+"de8e342f45cd43b9b798d5392f69571c.jpg"},797:function(n,t,e){n.exports=e.p+"7f8647c8180bf8a178085b2f13e8d329.jpg"},798:function(n,t,e){n.exports=e.p+"38e086998e4a2efdb3945fc5c72b555b.jpg"},799:function(n,t,e){n.exports=e.p+"5d56a4b1a06dd14868cb6b9c204d8709.jpg"},800:function(n,t,e){n.exports=e.p+"258470dfb76e85d4b196e6a0856b4c22.jpg"},801:function(n,t,e){n.exports=e.p+"bc0dd211cbb76d48363130c0821cc806.jpg"},802:function(n,t,e){n.exports=e.p+"ab8342d6dd07056718e58bb0493f5016.jpg"},803:function(n,t,e){"use strict";e.r(t),function(n){var t=e(19),r=e(0),o=e(154),i=e.n(o),a=e(250),c=e.n(a),l=e(4),s=e(13),u=e(6),p=e(15),f=function(){return(f=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},m=function(n){var t=n.src,e=n.title,o=n.from,i=n.onClick,a=n.in,c=n.selected;return r.createElement(p.t,null,r.createElement(p.g,null,r.createElement(u.k,{name:e,in:a},r.createElement(u.g,null,function(n){var e=n.ref,o=n.style;return r.createElement(p.l,{src:t,onClick:i,innerRef:e,style:f({},o,{opacity:c?0:o.opacity})})})),r.createElement(p.f,null)),r.createElement(p.j,null,e),r.createElement(p.h,null,o))},d=function(n){var t=n.src,o=n.title,i=n.onClick;return r.createElement(u.a,{name:o},function(n){return r.createElement(p.i,f({},n),r.createElement(l.e,{color:"default","aria-label":"Menu",style:{top:26,left:0,position:"absolute"},onClick:i},r.createElement(c.a,{color:"inherit"})),r.createElement(u.k,{name:o},r.createElement(u.g,null,function(n){var e=n.ref,o=n.style;return r.createElement(p.o,{src:t,innerRef:e,style:o})})),r.createElement(p.b,null,r.createElement(p.d,{in:"hidden"!==n.style.visibility},r.createElement(p.n,null,r.createElement(p.p,null,o),r.createElement(p.c,null,"Images may be subject to copyright.")),r.createElement(p.k,null,r.createElement(p.s,null,"Related images"),r.createElement(p.s,null,"See more")),r.createElement(p.k,null,r.createElement(p.a,null,r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia 1",from:"en.wikipedia.org"}),r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia 2",from:"en.wikipedia.org"}),r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia 3",from:"en.wikipedia.org"})),r.createElement(p.a,null,r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia 4",from:"en.wikipedia.org"}),r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia 5",from:"en.wikipedia.org"}),r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia 6",from:"en.wikipedia.org"}))))))})};Object(t.storiesOf)("yubaba-examples/ParentChild/ImageSearch",n).add("Default",function(){return r.createElement(s.d,null,function(n){var t=n.toggle,o=n.shown;return r.createElement(s.b,null,r.createElement(p.e,null,r.createElement(l.e,{color:"default","aria-label":"Menu",style:{marginRight:"10px"}},r.createElement(i.a,null)),r.createElement(p.m,null)),r.createElement(p.u,null),r.createElement(p.v,null),r.createElement(p.r,null,r.createElement(p.q,null,r.createElement("span",null,"alex ovechkin")),r.createElement(p.q,null,r.createElement("span",null,"blue jackets")),r.createElement(p.q,null,r.createElement("span",null,"maple leafs")),r.createElement(p.q,null,r.createElement("span",null,"stanley cup"))),r.createElement(p.k,null,r.createElement(p.a,null,r.createElement(m,{src:e(805),title:"Official Washington Capitals Website | NHL.com",from:"nhl.com",onClick:t}),r.createElement(m,{src:e(806),title:"Washington Capitals: 2017 Season Preview, Predictions",from:"puckprose.com",onClick:t}),r.createElement(m,{src:e(807),title:"The Washington Capitals are up to their old tricks again ...",from:"nhl.nbcsports.com",onClick:t})),r.createElement(p.a,null,r.createElement(m,{src:e(107),title:"Washington Capitals - Wikipedia",from:"en.wikipedia.org",onClick:t,in:!o,selected:!!o}),r.createElement(m,{src:e(808),title:"Washington Capitals - Home | Facebook",from:"facebook.com",onClick:t}),r.createElement(m,{src:e(809),title:"Capitals Announce 2017-18 Preseason Schedule",from:"nhl.com",onClick:t}))),o&&r.createElement(d,{src:e(107),title:"Washington Capitals - Wikipedia",from:"en.wikipedia.org",onClick:t}))})})}.call(this,e(45)(n))},804:function(n,t,e){n.exports=e.p+"d75f9c3df130d106af0440a53f353832.webp"},805:function(n,t,e){n.exports=e.p+"7518485cd73110a71e757b9b5a09b1ce.png"},806:function(n,t,e){n.exports=e.p+"0d3eb8a2f4a4203789b9c8dd1f47e6a3.jpeg"},807:function(n,t,e){n.exports=e.p+"c6133f3e97e4e5d50d9ff44b862a008f.jpeg"},808:function(n,t,e){n.exports=e.p+"0eaba7acd81bd95ddfb0e018de3bfc48.png"},809:function(n,t,e){n.exports=e.p+"9c0a1694a8a35d7e6a1dca6638631e84.jpeg"},810:function(n,t,e){"use strict";e.r(t),function(n){var t,r,o,i,a,c,l=e(2),s=e(0),u=e(19),p=e(151),f=e.n(p),m=e(105),d=e(4),h=e(154),g=e.n(h),b=e(213),y=e.n(b),x=e(142),v=e.n(x),w=e(153),E=e.n(w),k=e(576),O=e(6),_=e(214),T=e(13),j=e(577),A=function(n,t){return Object.defineProperty?Object.defineProperty(n,"raw",{value:t}):n.raw=t,n},z=(t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,e)},function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),C=function(){return(C=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)},P=T.f(),F=l.b.div(r||(r=A(["\n  padding-top: 66px;\n  margin: 0 auto;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ",";\n"],["\n  padding-top: 66px;\n  margin: 0 auto;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ",";\n"])),function(n){return n.background}),R=Object(l.b)(F)(o||(o=A(["\n  position: absolute;\n  top: 0;\n  min-height: 100vh;\n  left: 0;\n  right: 0;\n"],["\n  position: absolute;\n  top: 0;\n  min-height: 100vh;\n  left: 0;\n  right: 0;\n"]))),D=l.b.div(i||(i=A(["\n  display: grid;\n  grid-auto-flow: row dense;\n  grid-template-columns: repeat(5, auto);\n  grid-gap: 4px;\n"],["\n  display: grid;\n  grid-auto-flow: row dense;\n  grid-template-columns: repeat(5, auto);\n  grid-gap: 4px;\n"]))),M=Object(l.b)(f.a)(a||(a=A(["\n  margin: 0;\n  background: #212121;\n"],["\n  margin: 0;\n  background: #212121;\n"]))),I=l.b.div(c||(c=A(["\n  position: fixed;\n  background: ",";\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: -1;\n  background-size: cover;\n  background-position-y: -110px;\n  background-repeat: no-repeat;\n"],["\n  position: fixed;\n  background: ",";\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: -1;\n  background-size: cover;\n  background-position-y: -110px;\n  background-repeat: no-repeat;\n"])),function(n){return n.background}),N=Object(m.createMuiTheme)({palette:{primary:{light:"#484848",main:"#212121",dark:"#000000",contrastText:"#fff"}}}),S=function(n){function t(){var t=null!==n&&n.apply(this,arguments)||this;return t.state={shown:void 0},t.select=function(n){t.setState({shown:n})},t}return z(t,n),t.prototype.getKey=function(){return["multiple-targets","move",this.props.expand&&"expand",this.props.shrink&&"shrink",this.props.wait&&"wait"].filter(Boolean).join("-")},t.prototype.renderItems=function(){var n=this,t=_.a.map(function(t,e){return s.createElement(k.a,C({expand:n.props.expand,baba:n.getKey()+"-"+e,onClick:function(){return n.select(e)},key:e},t))});return s.createElement(O.a,{key:"b"},function(n){return s.createElement(F,C({background:"#212121"},n),s.createElement(P,null),s.createElement(M,{className:""}),s.createElement(D,null,t))})},t.prototype.renderDetails=function(n){var t=this,e=n&&_.a[n].heroBg;return s.createElement(O.a,{key:"c"},function(r){return s.createElement(R,C({background:""},r),s.createElement(I,{background:t.props.expand&&e?"url("+e+")":_.a[n||0].color}),s.createElement(d.a,{position:"fixed",style:{background:"transparent",boxShadow:"none",zIndex:1}},s.createElement(d.n,null,s.createElement(d.e,{color:"inherit","aria-label":"Menu",style:{marginRight:"10px"},onClick:function(){return t.select()}},s.createElement(E.a,null)),s.createElement(d.e,{color:"inherit","aria-label":"Menu",style:{marginLeft:"auto"}},s.createElement(y.a,null)),s.createElement(d.e,{color:"inherit","aria-label":"Menu"},s.createElement(v.a,null)))),s.createElement(M,{className:""}),s.createElement(T.a,null),s.createElement(j.a,C({baba:t.getKey()+"-"+n,shrink:!!t.props.shrink,wait:!!t.props.wait},_.a[n||0])))})},t.prototype.render=function(){return s.createElement(m.MuiThemeProvider,{theme:N},s.createElement(d.a,{position:"fixed",style:{zIndex:1,display:void 0===this.state.shown?"":"none"}},s.createElement(d.n,null,s.createElement(d.e,{color:"inherit","aria-label":"Menu",style:{marginRight:"10px"}},s.createElement(g.a,null)),s.createElement(d.o,{variant:"title",color:"inherit"},"My Library"),s.createElement(d.e,{color:"inherit","aria-label":"Menu",style:{marginLeft:"auto"}},s.createElement(y.a,null)),s.createElement(d.e,{color:"inherit","aria-label":"Menu"},s.createElement(v.a,null)))),void 0!==this.state.shown?this.renderDetails(this.state.shown):this.renderItems())},t}(s.Component);Object(u.storiesOf)("yubaba-examples/ParentChild/MusicPlayer",n).add("Default",function(){return s.createElement(S,{expand:!0,shrink:!0})}).add("MoveOnly",function(){return s.createElement(S,null)})}.call(this,e(45)(n))},811:function(n,t,e){n.exports=e.p+"1bf5ea6fa68f3a3ee59cd4f5d8262eed.jpg"},812:function(n,t,e){n.exports=e.p+"11dd46941292ae89638a3be527ae6484.jpg"},813:function(n,t,e){n.exports=e.p+"dd9c6058cdd8f0a614e74e6cbc971d8e.png"},814:function(n,t,e){n.exports=e.p+"769bf539a12c7c57612c4e72f5576564.png"},815:function(n,t,e){n.exports=e.p+"7d7e2f008572f6ee7d1e607b7bca2ae2.jpg"},816:function(n,t,e){n.exports=e.p+"bad48182e680328c542cf59ecf505216.jpg"},817:function(n,t,e){n.exports=e.p+"44a26abcd4c6f3633afec92e763a337e.png"},818:function(n,t,e){n.exports=e.p+"bc9d40e307c96c7fbe35493dc959f4da.jpg"},819:function(n,t,e){n.exports=e.p+"2700d718ed66623c214fe7d9823800db.jpg"},820:function(n,t,e){n.exports=e.p+"976fabb3d53e66b5517ffbd06e4ba248.jpeg"},821:function(n,t,e){"use strict";e.r(t),function(n){var t=e(19),r=e(0),o=e(153),i=e.n(o),a=e(455),c=e.n(a),l=e(4),s=e(6),u=e(13),p=e(254);Object(t.storiesOf)("yubaba-examples/Transformation/SearchBar",n).add("Default",function(){return r.createElement(u.d,null,function(n){var t=n.shown,e=n.toggle;return r.createElement(u.b,null,t||r.createElement(s.k,{name:"google-searchbar"},r.createElement(s.f,{duration:400},function(n){var t=n.ref,o=n.style;return r.createElement(p.b,{onClick:function(){return e()},innerRef:t,style:o},r.createElement(l.e,{color:"default","aria-label":"Menu",style:{marginLeft:"auto "}},r.createElement(c.a,{colorRendering:"blue"})))})),t&&r.createElement(s.k,{name:"google-searchbar"},r.createElement(s.f,{duration:300},function(n){var t=n.ref,o=n.style;return r.createElement(p.a,{innerRef:t,style:o},r.createElement(l.e,{color:"default","aria-label":"Menu",onClick:function(){return e()}},r.createElement(i.a,{color:"inherit"})),r.createElement(p.c,{autoFocus:!0,placeholder:"Search or type URL"}),r.createElement(l.e,{color:"default","aria-label":"Menu"},r.createElement(c.a,{colorRendering:"blue"})))})))})})}.call(this,e(45)(n))},84:function(n,t,e){"use strict";t.a=function(){}},88:function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=function(){return"cubic-bezier(0.4, 0.0, 0.2, 1)"}}},[[669,3,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,